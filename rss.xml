<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Techno Fattie</title>
    <link>http://www.technofattie.com</link>
    <description>Josh Carroll's Blog about Programming, Techno and Fatties... ok mostly just programming.</description>
    <copyright>2014 Josh Carroll All rights reserved</copyright>
    <pubDate>Tue, 01 Jul 2014 00:00:00 -0400</pubDate>
    <item>
      <title>Using Angular Forms With Controller As Syntax</title>
      <link>http://www.technofattie.com/2014/07/01/using-angular-forms-with-controller-as-syntax.html</link>
      <description>&lt;p&gt;&lt;strong&gt;I love using Angular&amp;#39;s Controller As syntax to clean up my code&lt;/strong&gt;, and I&amp;#39;m happy to see this technique &lt;a href=&quot;http://toddmotto.com/rethinking-angular-js-controllers/&quot;&gt;is catching on&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Tue, 01 Jul 2014 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2014/07/01/using-angular-forms-with-controller-as-syntax.html</guid>
      <dc:date>2014-07-01T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>How To Extend Angular's Script Directive</title>
      <link>http://www.technofattie.com/2014/03/25/how-to-extend-angular-script-directive.html</link>
      <description>&lt;p&gt;&lt;strong&gt;Angular&amp;#39;s built in &lt;a href=&quot;http://docs.angularjs.org/api/ng/directive/script&quot;&gt;script directive&lt;/a&gt; is really nice for embedded templates, but not much else.&lt;/strong&gt; If you are like me, you
have found yourself wanting to be able to extend it to work for other types of embedded data. Luckily this turns out
to be pretty easy, but not obvious.&lt;/p&gt;
</description>
      <pubDate>Tue, 25 Mar 2014 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2014/03/25/how-to-extend-angular-script-directive.html</guid>
      <dc:date>2014-03-25T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>5 Guidelines For Avoiding Scope Soup in Angular</title>
      <link>http://www.technofattie.com/2014/03/21/five-guidelines-for-avoiding-scope-soup-in-angular.html</link>
      <description>&lt;h3&gt;Today I was answering a question on Stackoverflow about Angular.js&lt;/h3&gt;
</description>
      <pubDate>Fri, 21 Mar 2014 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2014/03/21/five-guidelines-for-avoiding-scope-soup-in-angular.html</guid>
      <dc:date>2014-03-21T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>Angular Powered Text Transformations - Part 1</title>
      <link>http://www.technofattie.com/2014/02/15/angular-powered-text-transformations.html</link>
      <description>&lt;h3&gt;Tell me if this sounds familiar?&lt;/h3&gt;
</description>
      <pubDate>Sat, 15 Feb 2014 00:00:00 -0500</pubDate>
      <guid>http://www.technofattie.com/2014/02/15/angular-powered-text-transformations.html</guid>
      <dc:date>2014-02-15T00:00:00-05:00</dc:date>
    </item>
    <item>
      <title>Slaying The Dragons of Self Defeat</title>
      <link>http://www.technofattie.com/2014/02/11/slaying-the-dragons-of-self-defeat.html</link>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; - &lt;em&gt;Sometimes, climbing a mountain has more to do with the challenge inside of you, than the one in front of you.&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 11 Feb 2014 00:00:00 -0500</pubDate>
      <guid>http://www.technofattie.com/2014/02/11/slaying-the-dragons-of-self-defeat.html</guid>
      <dc:date>2014-02-11T00:00:00-05:00</dc:date>
    </item>
    <item>
      <title>But What If We Run Out of Guids?</title>
      <link>http://www.technofattie.com/2013/04/15/but-what-if-we-run-out-of-guids.html</link>
      <description>&lt;p&gt;There was a bit of programmer humor happening on Twitter today concerning GUIDs.&lt;/p&gt;
</description>
      <pubDate>Mon, 15 Apr 2013 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2013/04/15/but-what-if-we-run-out-of-guids.html</guid>
      <dc:date>2013-04-15T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>Angular Modules And Dependency Injection</title>
      <link>http://www.technofattie.com/2013/04/12/angular-modules-and-dependency-injection.html</link>
      <description>&lt;h3&gt;Angular is Awesome!&lt;/h3&gt;
</description>
      <pubDate>Fri, 12 Apr 2013 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2013/04/12/angular-modules-and-dependency-injection.html</guid>
      <dc:date>2013-04-12T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>PowerShell Equality Gotcha: Not Always Commutative</title>
      <link>http://www.technofattie.com/2013/04/02/powershell-equality-gotcha-not-always-commutative.html</link>
      <description>PowerShell is awesome! However, it also has its share of maddening quirks.&lt;br /&gt;&lt;br /&gt;Jim Christopher (&lt;a href=&quot;https://twitter.com/beefarino&quot;&gt;@beefarino&lt;/a&gt;) has highlighted one such quirk in the form of &lt;a href=&quot;http://beefycode.com/post/PowerShell-Mini-game-Equality.aspx&quot;&gt;a brain teaser on his blog&lt;/a&gt;. The question is deceptively simple, but unless you have done a dance or three with PowerShell it might leave you scratching your head.&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;Query: In PowerShell, when is the following statement true? Explain why.&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;( $a -eq $b ) -ne ( $b -eq $a )&lt;/blockquote&gt;&lt;br /&gt;Know the answer? Try assigning these values to $a and $b&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;$a = 1&lt;br /&gt;$b = '01'&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;If you run that expression again, it should come up as true.&lt;br /&gt;&lt;br /&gt;Why?&lt;br /&gt;&lt;br /&gt;It all has to do with what PowerShell is doing automatically for you. Since a string and an integer are disparate types, &lt;b&gt;PowerShell is attempting to cast the values to the same type in order to do a comparison&lt;/b&gt;. In order to determine which type to cast to, the left operand is used.&lt;br /&gt;&lt;br /&gt;If we write our expression out the way it is being&amp;nbsp;interpreted, then it becomes pretty obvious what is going on.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;&lt;br /&gt;([int]1 -eq [int]'01') -ne ([string]'01' -eq [string]1)&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;See what's going on? Obviously casting '01' to an [int] is not the same as casting 1 to a [string].&lt;br /&gt;&lt;br /&gt;This is one of those things that makes sense when you look at it directly, but when it is an obscure bug&amp;nbsp;buried&amp;nbsp;deep inside one of your production scripts... it can drive you insane.&lt;br /&gt;&lt;br /&gt;Just remember that equality&amp;nbsp;comparisons&amp;nbsp;in PowerShell are not always commutative.&lt;br /&gt;&lt;br /&gt;Happy Scripting, and thanks&amp;nbsp;&lt;a href=&quot;https://twitter.com/beefarino&quot;&gt;@beefarino&lt;/a&gt; for a fun challenge, and being the guy who made me want to learn PowerShell in the first place :)


</description>
      <pubDate>Tue, 02 Apr 2013 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2013/04/02/powershell-equality-gotcha-not-always-commutative.html</guid>
      <dc:date>2013-04-02T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>Prototypal Inheritance in C#</title>
      <link>http://www.technofattie.com/2012/08/31/prototypal-inheritance-in-c%23.html</link>
      <description>The other day an interesting question was posed on Stackoverflow.     Sumarizing:  &lt;br /&gt;&lt;blockquote&gt;&quot;How can I add methods to a type dynamically at runtime and have them be       available to all other instances of that type?&quot;     &lt;/blockquote&gt;That is certainly an interesting question. Of course this is     similar to how &lt;a href=&quot;http://javascript.crockford.com/prototypal.html&quot;&gt;JavaScript works via the prototype property&lt;/a&gt; that all objects     have. So I set out to see how easy it would be to simulate prototypal     inheritance in C# using the new &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd233052.aspx&quot;&gt;Dynamic&amp;nbsp;Language&amp;nbsp;Runtime&lt;/a&gt; features     introduced in C# 4.0.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Now let me preface this by saying this solution is an     answer in search of a question. That is, there is no particular problem I     can immediately think of that this solves. It is a decent demonstration of     the dynamic capabilities available to you in C#, but if you find yourself     needing this kind of behavior, you might be a closet hipster.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;What would     such an implementation look like? Imagine the following class     structure:  &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;public class Foo {}&lt;br /&gt;public class Bar: Foo {}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;And now we would like to be able to dynamically define methods for Foo and Bar at runtime like so.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;code&gt;var foo1 = new Foo();&lt;br /&gt;var foo2 = new Foo();&lt;br /&gt;&lt;br /&gt;Foo.Add = new Func&amp;lt;Int32,Int32,Int32&amp;gt;((a, b) =&amp;gt;; a + b);&lt;br /&gt;&lt;br /&gt;var result1 = foo1.Add(5, 5); // result1 == 10&lt;br /&gt;var result2 = foo2.Add(10, 5); // result2 == 15&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;As it is written, this is impossible since it won't even compile. However, if we leverage the DLR and the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd264736.aspx&quot;&gt;dynamic keyword&lt;/a&gt;, then we can begin to make some magic happen. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.dynamic.expandoobject.aspx&quot;&gt;ExpandoObject &lt;/a&gt;is certainly an attractive new addition to .Net, as it allows us to dynamically add members at runtime, but they are local to that instance only. So for our purposes we are going to have to turn to the low level &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.aspx&quot;&gt;DynamicObject&lt;/a&gt;. DynamicObject gives us hooks into the new dynamic features of the runtime, but we are forced to write all the necessary plumbing to get the functionality we want. At a minimum we need to be able to:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Add new properties       &lt;/li&gt;&lt;li&gt;Add new methods       &lt;/li&gt;&lt;li&gt;Retrieve the value of dynamic properties       &lt;/li&gt;&lt;li&gt;Invoke dynamically added methods       &lt;/li&gt;&lt;/ul&gt;This turns out to be pretty easy by overriding just three methods from     DynamicObject. &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.trysetmember.aspx&quot;&gt;TrySetMember&lt;/a&gt;, &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.trygetmember&quot;&gt;TryGetMember&lt;/a&gt;&amp;nbsp;and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.tryinvokemember&quot;&gt;TryInvokeMember&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;public class ProtoObject : DynamicObject&lt;br /&gt;{&lt;br /&gt; private Dictionary&amp;lt;String,Object&amp;gt; _members = new Dictionary&amp;lt;String,Object&amp;gt;();&lt;br /&gt;&lt;br /&gt; public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)&lt;br /&gt; {&lt;br /&gt;  Object member = null;&lt;br /&gt;  result = null;&lt;br /&gt;&lt;br /&gt;  //Check to see if we have a member of this name&lt;br /&gt;  var success = _members.TryGetValue(binder.Name, out member);&lt;br /&gt;&lt;br /&gt;  //Check to make sure it is a delegate that can be invoked&lt;br /&gt;  if (success &amp;amp;&amp;amp; member is Delegate)&lt;br /&gt;  {&lt;br /&gt;   //Execute the member with the passed in arguments and assing the result&lt;br /&gt;   result = ((Delegate)member).DynamicInvoke(args);&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  return success;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public override bool TryGetMember(GetMemberBinder binder, out object result)&lt;br /&gt; {&lt;br /&gt;  //Attempt to get the saved value with specified name&lt;br /&gt;  var success = _members.TryGetValue(binder.Name, out result);&lt;br /&gt;&lt;br /&gt;  return success;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; public override bool TrySetMember(SetMemberBinder binder, object value)&lt;br /&gt; {&lt;br /&gt;  //Add the new member name and value to our dictionary&lt;br /&gt;  // or override the existing value&lt;br /&gt;  if (_members.ContainsKey(binder.Name))&lt;br /&gt;   _members[binder.Name] = value;&lt;br /&gt;  else&lt;br /&gt;   _members.Add(binder.Name, value);&lt;br /&gt;&lt;br /&gt;  return true;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Now we have a custom object that will act similar to how ExpandoObject       works. However, &lt;b&gt;we still haven't solved the issue of inheriting members       across all types&lt;/b&gt;. What we need is a shared collection of members that are       specific to that type.&lt;br /&gt;&amp;nbsp;     &lt;br /&gt;I've chosen a static Dictionary&amp;lt;Type,ExpandoObject&amp;gt; for this       solution. Obviously we want to use Type as a key since the members should       be specific to a type, and ExpandoObject already gives us all the       functionality we need to store a collection of arbitrary properties and       methods.     &lt;br /&gt;&lt;br /&gt;In order to make this work properly, we need to initialize the Dictionary       with each new type in the&amp;nbsp;inheritance&amp;nbsp;chain, and provide a humane way of       adding new members to a specific type. The constructor can be used to       ensure that new types are added to the Dictionary, and by getting       creating with the dynamic keyword, we can add a Prototype property that       will give each type access to it's corresponding ExpandoObject.     &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;private static readonly Dictionary&amp;lt;Type,ExpandoObject&amp;gt; _prototypes = new Dictionary&amp;lt;Type,ExpandoObject&amp;gt;();&lt;br /&gt;&lt;br /&gt;public ProtoObject()&lt;br /&gt;{&lt;br /&gt; if (Prototype == null)&lt;br /&gt; {&lt;br /&gt;  _prototypes.Add(GetType(), new ExpandoObject());&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public dynamic Prototype&lt;br /&gt;{&lt;br /&gt; get&lt;br /&gt; {&lt;br /&gt;  if (_prototypes.ContainsKey(GetType()))&lt;br /&gt;   return _prototypes[GetType()];&lt;br /&gt;  else&lt;br /&gt;   return null;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Finally, when a request for a member is made, we need to first check to       see if there is one defined on the instance. If we can't find one, then       we can begin looking for a matching member in the prototype object,       walking the&amp;nbsp;inheritance&amp;nbsp;chain until we find what we are looking for.     &lt;br /&gt;&lt;br /&gt;Since finding an appropriate prototype member by walking the inheritance       chain is recursive in nature, a helper method can be added to make this       easier. While TrySetMember remains unchanged, TryInvokeMember and       TryGetMember need to change slightly to&amp;nbsp;accommodate&amp;nbsp;the new       functionality, but not by much.     &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)&lt;br /&gt;{&lt;br /&gt; Object member = null;&lt;br /&gt; result = null;&lt;br /&gt;&lt;br /&gt; var success _members.TryGetValue(binder.Name, out member);&lt;br /&gt;&lt;br /&gt; if (success &amp;amp;&amp;amp; member is Delegate)&lt;br /&gt; {&lt;br /&gt;  result = ((Delegate)member).DynamicInvoke(args);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; if (!success)&lt;br /&gt; {&lt;br /&gt;  member = FindPrototypeMember(binder.Name, GetType());&lt;br /&gt;&lt;br /&gt;  if (member is Delegate)&lt;br /&gt;  {&lt;br /&gt;   result = ((Delegate)member).DynamicInvoke(args);&lt;br /&gt;   success = true;&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; return success;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public override bool TryGetMember(GetMemberBinder binder, out object result)&lt;br /&gt;{&lt;br /&gt; var success = _members.TryGetValue(binder.Name, out result);&lt;br /&gt;&lt;br /&gt; if (!success)&lt;br /&gt; {&lt;br /&gt;  var member = FindPrototypeMember(binder.Name, GetType());&lt;br /&gt;&lt;br /&gt;  if (member != null)&lt;br /&gt;  {&lt;br /&gt;   result = member;&lt;br /&gt;   success = true;&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; return success;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;//Walk the inheritance chain using recursion to find a suitable&lt;br /&gt;// prototype member&lt;br /&gt;private object FindPrototypeMember(string memberName, Type type)&lt;br /&gt;{&lt;br /&gt; if (String.IsNullOrWhiteSpace(memberName) || type == null) return null;&lt;br /&gt;&lt;br /&gt; if (!_prototypes.ContainsKey(type)) return null;&lt;br /&gt;&lt;br /&gt; var prototype = _prototypes[type] as IDictionary;&lt;br /&gt;&lt;br /&gt; if (prototype.ContainsKey(memberName))&lt;br /&gt;  return prototype[memberName];&lt;br /&gt; else&lt;br /&gt;  return FindPrototypeMember(memberName, type.BaseType);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Putting this all together allows us to inherit from this object and       dynamically add members and properties at runtime that will be available       to all instances of that type. In other words, given this class       structure:     &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;public class Foo: ProtoObject {}&lt;br /&gt;public class Bar: Foo {}&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;This code is totally valid:     &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;dynamic myFoo = new Foo();&lt;br /&gt;dynamic yourFoo = new Foo();&lt;br /&gt;dynamic myBar = new Bar();&lt;br /&gt;&lt;br /&gt;myFoo.Prototype.Name = &quot;Josh&quot;;&lt;br /&gt;myFoo.Prototype.SayHello = new Action(s =&amp;gt; Console.WriteLine(&quot;Hello, &quot; + s));&lt;br /&gt;&lt;br /&gt;yourFoo.SayHello(myBar.Name); // 'Hello, Josh'&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Again, I can't think of any practical use for this off the top of my       head, but it is interesting to see just how much flexibility you can       squeeze out of C# with very little code.&amp;nbsp;     &lt;br /&gt;&lt;br /&gt;For those who are interested &lt;a href=&quot;https://github.com/Wintellect/ProtoSharp&quot;&gt;a more robust version of this code is      available on GitHub&lt;/a&gt;. The unit tests are the best documentation of the       additional features, mainly:     &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Ability to check for &quot;undefined&quot; members by returning a special         value instead of throwing an exception         &lt;/li&gt;&lt;li&gt;Ability to access the current instance from within dynamically         added methods.         &lt;/li&gt;&lt;li&gt;Allows original exception with full stack trace to propogate         instead of a RuntimeBinderException.         &lt;/li&gt;&lt;/ul&gt;


</description>
      <pubDate>Fri, 31 Aug 2012 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2012/08/31/prototypal-inheritance-in-c%23.html</guid>
      <dc:date>2012-08-31T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>Validating &quot;Read the Source, Luke&quot;</title>
      <link>http://www.technofattie.com/2012/04/21/validating-read-the-source-luke.html</link>
      <description>So recently Jeff Atwood &lt;strike&gt;quoted&lt;/strike&gt; wrote a pretty nice article about why &lt;a href=&quot;http://www.codinghorror.com/blog/2012/04/learn-to-read-the-source-luke.html&quot;&gt;learning to read source code&lt;/a&gt; is so important for developers. I absolutely could not agree more with that post.&lt;br /&gt;&lt;br /&gt;As a tribute, I thought I would share a recent example where this principle would have settled an argument on Stackoverflow, and perhaps not lead to me using two unwitting souls for fodder in this blog post.&lt;br /&gt;&lt;br /&gt;The question itself was pretty trivial. &lt;i&gt;&quot;How to select List&amp;lt;&amp;gt; by its index and return the content?&quot;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;One of the answers suggested using the&amp;nbsp;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb299233.aspx&quot;&gt;&lt;span style=&quot;background-color: #eeeeee; color: black; font-family: 'Courier New', Courier, monospace;&quot;&gt;ElementAt&lt;/span&gt; &lt;/a&gt;extension method as an alternative to using the standard indexer. No big deal, but what ensued was a pretty fun little comment argument. I've changed the names to protect the innocent:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-GcB6fbO4IAY/T5NwTwkDWAI/AAAAAAAABOE/S7OxWICZHTw/s1600/CommentThreadForStackoverflowQuestion_First.png&quot; /&gt;&lt;/div&gt;&lt;br /&gt;So Bob is making a legitimate claim that using &lt;span style=&quot;background-color: #eeeeee;&quot;&gt;&lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;ElementAt&lt;/span&gt;&lt;/span&gt; would be&amp;nbsp;inefficient&amp;nbsp;compared to using an indexer. Unfortunately he also makes a pretty wild claim about &lt;span style=&quot;background-color: #eeeeee;&quot;&gt;&lt;span style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;ElementAt&lt;/span&gt;&lt;/span&gt; not returning the same value that calling the indexer on a List&lt;t&gt; would.&lt;/t&gt;&lt;br /&gt;&lt;br /&gt;Larry then decides to defend himself in a way that every programmer has probably done at some point; he writes a small test program. You can see the code here:&amp;nbsp;&lt;a href=&quot;http://ideone.com/H0A2X&quot;&gt;http://ideone.com/H0A2X&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Despite the test program being fundamentally flawed&lt;/b&gt;&amp;nbsp;(&lt;i&gt;see fixed program here:&amp;nbsp;&lt;a href=&quot;http://ideone.com/hooQB&quot;&gt;http://ideone.com/hooQB&lt;/a&gt;&lt;/i&gt;), Larry got the numbers he was looking for. Armed with a helping of confirmation bias, and his new numbers, Larry decides to respond back to Bob.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-lU_RfC4YZfU/T5N0E0Uj-nI/AAAAAAAABOM/MlGgMQP4CNU/s1600/CommentThreadForStackoverflowQuestion_Second.png&quot; /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;And what else did Larry have to say about his results:&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;/div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&quot;When it comes to errors, the MSDN documentation and a wealth of empirical evidence suggests that such concerns are wholly unfounded...&amp;nbsp;&lt;span style=&quot;background-color: yellow;&quot;&gt;The&amp;nbsp;&lt;code style=&quot;background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; border-bottom-width: 0px; border-color: initial; border-image: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 1px; padding-left: 5px; padding-right: 5px; padding-top: 1px; vertical-align: baseline;&quot;&gt;ElementAt()&lt;/code&gt;&amp;nbsp;method is definitely faster&lt;/span&gt;...&amp;nbsp;I have tested Lists of type double, float and string with similar results...&quot;&lt;/span&gt;&lt;/blockquote&gt;In the end... &lt;b&gt;both of these guys are wrong!&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;So what is the truth? What does the source code say? Let's use &lt;a href=&quot;http://www.jetbrains.com/decompiler/&quot;&gt;DotPeek&lt;/a&gt;&amp;nbsp;and find out:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-dhyxvPa-wkU/T5N6zmClg-I/AAAAAAAABOc/uEtsOcl4ZNM/s1600/ElementAtSource_Annotated.png&quot; /&gt;&lt;/div&gt;&lt;br /&gt;Turns out that &lt;span style=&quot;background-color: #eeeeee; font-family: 'Courier New', Courier, monospace;&quot;&gt;ElementAt&lt;/span&gt; is optimized for anything that implements &lt;span style=&quot;background-color: #eeeeee; font-family: 'Courier New', Courier, monospace;&quot;&gt;IList&amp;lt;T&amp;gt;&lt;/span&gt;and simply calls the indexer. &lt;b&gt;A 30 second look at the source code would have ended this argument before it started&lt;/b&gt;. In reality &lt;span style=&quot;background-color: #eeeeee; font-family: 'Courier New', Courier, monospace;&quot;&gt;ElementAt&lt;/span&gt; is 3 times slower when called on a &lt;span style=&quot;background-color: #eeeeee; font-family: 'Courier New', Courier, monospace;&quot;&gt;List&amp;lt;T&amp;gt;&lt;/span&gt; because of the cast.&lt;br /&gt;&lt;br /&gt;If you need to know how something works, then you need to go to the source code and see for yourself. &lt;b&gt;Without this skill, you will never know for sure how stuff works.&lt;/b&gt; Don't waste your time arguing about how you think things work when the answer is right at your finger tips.&lt;br /&gt;&lt;br /&gt;Follow &lt;a href=&quot;http://www.codinghorror.com/&quot;&gt;Jeff &lt;/a&gt;and &lt;a href=&quot;http://blog.brandonbloom.name/&quot;&gt;Brandon's&lt;/a&gt; advice and&amp;nbsp;&lt;a class=&quot;title-link&quot; href=&quot;http://www.codinghorror.com/blog/2012/04/learn-to-read-the-source-luke.html&quot;&gt;Learn to Read the Source, Luke&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;


</description>
      <pubDate>Sat, 21 Apr 2012 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2012/04/21/validating-read-the-source-luke.html</guid>
      <dc:date>2012-04-21T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>Whine Less... Code More</title>
      <link>http://www.technofattie.com/2012/02/02/whine-less-code-more.html</link>
      <description>&lt;div class=&quot;tr_bq&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Developers are a whiny bunch.&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;Today I was reading one of &lt;a href=&quot;http://www.hanselman.com/blog/OneASPNETSneakPeekElegantWebFormsAndSnowballsInHell.aspx&quot;&gt;Scott Hanselman's latest posts&lt;/a&gt; on some improvements being made in WebForms, and was pretty amazed at how generally whiny the comments were.&lt;br /&gt;&lt;br /&gt;You could read all the comments, but they can pretty much be broken down into 3 categories of whiny trolls.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The Hater&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #fff2cc;&quot;&gt;Dear Scott,&lt;br /&gt;&lt;br /&gt;You suck! WebForms sucks! Microsoft sucks! And pretty much every technology they produce is total garbage. I still program using the MS stack of course... cause you know... I'd rather complain than learn a new technology.&lt;/div&gt;&lt;br /&gt;&lt;b&gt;The Righteous One&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #fff2cc;&quot;&gt;Dear Scott,&lt;br /&gt;&lt;br /&gt;How can you even look at yourself in the mirror after writing such filthy code. I realize this is just a blog post... meant to be a simple&amp;nbsp;demonstration&amp;nbsp;of a new feature, but how dare you not follow all 5 of the SOLID principles, complete with a full suite of unit and integration tests (written first of course). You didn't even use an IoC!!!!&amp;nbsp;And you call yourself a programmer!&amp;nbsp; &lt;br /&gt;&lt;br /&gt;All .Net developers are pretty much worthless, incompetent boobs... except for me of course. I would write a better example myself, but I'm too busy telling people like you how crappy a programmer they are :P&lt;/div&gt;&lt;br /&gt;&lt;b&gt;The Hipster&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: #fff2cc;&quot;&gt;Dear Scott,&lt;br /&gt;&lt;br /&gt;Whoa dude! WebForms is so primitive man. Only old people and corporate shills program in WebForms. Everybody knows that MVC is what all the cool kids are using. That internal corporate app I wrote is like... blowing minds... all five of them.&amp;nbsp; &lt;br /&gt;&lt;br /&gt;Besides, everybody knows that WebForms is way too much abstraction, and the ViewState, oh man was it terrible. I never knew what the ViewState was for, but I know it was bad! With MVC I can get down to bare metal baby! I still don't know what a Handler or Module is, and I never really touch the form collection or HttpContext... but it's so much less abstract than WebForms.&lt;/div&gt;&lt;br /&gt;So, to all you whiny programmers out there, I have a some people you should meet.&amp;nbsp;I know you know these people. You probably troll their blogs regularly.&lt;br /&gt;&lt;br /&gt;&lt;hr /&gt;&lt;div style=&quot;padding: 10px;&quot;&gt;&lt;a href=&quot;http://www.objectmentor.com/omTeam/martin_r.html&quot;&gt;Bob Martin&lt;/a&gt;, &lt;a href=&quot;http://www.objectmentor.com/omTeam/feathers_m.html&quot;&gt;Michael Feathers&lt;/a&gt;, &lt;a href=&quot;http://www.objectmentor.com/omTeam/jeffries_r.html&quot;&gt;Ron Jeffries&lt;/a&gt; and &lt;a href=&quot;http://martinfowler.com/&quot;&gt;Martin Fowler&lt;/a&gt; were doing awesome things while you were still drinking from a sippy cup.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://david.heinemeierhansson.com/&quot;&gt;David Heinemeier Hansson&lt;/a&gt;&amp;nbsp;liked Ruby and needed a web framework. &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;So he wrote one&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://wekeroad.com/&quot;&gt;Rob Conery&lt;/a&gt; didn't like big heavy ORM's so &lt;a href=&quot;https://github.com/robconery/massive&quot;&gt;he wrote a tiny one&lt;/a&gt;. He also created a startup using ASP.Net MVC... and then &lt;a href=&quot;http://www.infoq.com/articles/architecting-tekpub&quot;&gt;rewrote it using RoR&lt;/a&gt; just because he could.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://haacked.com/&quot;&gt;Phil Haack&lt;/a&gt; helped bring &lt;a href=&quot;http://haacked.com/tags/aspnetmvc/default.aspx&quot;&gt;MVC&lt;/a&gt; to the world of ASP.Net&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://jeremydmiller.com/&quot;&gt;Jeremy Miller&lt;/a&gt; and &lt;a href=&quot;http://ayende.com/blog&quot;&gt;Oren Eini&lt;/a&gt; wake up in the morning and pee new frameworks that are awesome.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.joelonsoftware.com/&quot;&gt;Joel Spolsky's&lt;/a&gt; company wrote an awesome &lt;a href=&quot;http://www.fogcreek.com/fogbugz/&quot;&gt;bug tracker&lt;/a&gt; in classic asp. &lt;b&gt;ASP FOR GOODNESS SAKE!&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;a href=&quot;http://www.codinghorror.com/blog/&quot;&gt;Jeff Atwood&lt;/a&gt; wrote &lt;a href=&quot;http://stackoverflow.com/&quot;&gt;Stackoverflow &lt;/a&gt;when MVC was still in beta.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://damianedwards.wordpress.com/&quot;&gt;Damien Edwards&lt;/a&gt; continues to rock out ASP.Net&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://blogs.msdn.com/b/gblock/&quot;&gt;Glenn Block&lt;/a&gt; is infusing &lt;a href=&quot;http://wcf.codeplex.com/wikipage?title=WCF%20HTTP&quot;&gt;WCF with web enabled awesome sauce&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://ejohn.org/&quot;&gt;John Resig&lt;/a&gt; made the entire web take &lt;a href=&quot;http://jquery.com/&quot;&gt;Javascript seriously&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://blog.stevensanderson.com/&quot;&gt;Steve Sanderson&lt;/a&gt; brought MVVM to web apps using &lt;a href=&quot;http://knockoutjs.com/&quot;&gt;Knockout.js&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://twitter.com/#!/davidfowl&quot;&gt;David Fowler&lt;/a&gt; is making realtime web stupid easy with &lt;a href=&quot;https://github.com/SignalR/SignalR&quot;&gt;SignalR&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;And last but not least... &lt;a href=&quot;http://www.hanselman.com/blog/&quot;&gt;Scott Hanselman&lt;/a&gt; was pimping ASP.Net and make it look good &lt;a href=&quot;http://www.hanselman.com/blog/IMGHeight394AltAPictureNamedSoapExtWizJPGHspace15Srchttpradioweblogscom0108971images2002101.aspx&quot;&gt;back when it was still 1.0&lt;/a&gt;&lt;/div&gt;&lt;hr /&gt;&lt;br /&gt;So what do they all have in common?&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;They can't hear you over the sound of how awesome they are!&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;Not all of them work on the same technology stack, but all of them have been consistently awesome at what they do &lt;b&gt;regardless of the technology they were using.&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Technologies do not make awesome applications. Awesome people make awesome applications.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Stop spending so much time and effort complaining and start doing something amazing... right now!&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #cc0000; font-size: x-large;&quot;&gt;&lt;b&gt;Less Whine! More Awesome!&lt;/b&gt;&lt;/span&gt;


</description>
      <pubDate>Thu, 02 Feb 2012 00:00:00 -0500</pubDate>
      <guid>http://www.technofattie.com/2012/02/02/whine-less-code-more.html</guid>
      <dc:date>2012-02-02T00:00:00-05:00</dc:date>
    </item>
    <item>
      <title>It's The Principal...</title>
      <link>http://www.technofattie.com/2012/01/31/it%27s-the-principal.html</link>
      <description>In ancient times... at least according to web standards, I wrote a &lt;a href=&quot;http://technofattie.blogspot.com/2011/02/unit-testing-and-declarative-security.html&quot;&quot;&gt;couple of posts&lt;/a&gt; about &lt;a href=&quot;http://technofattie.blogspot.com/2011/04/unit-testing-and-declarative-security.html&quot;&gt;unit testing with declarative security attributes&lt;/a&gt;. It turns out that while using declarative security is pretty awesome, it's clear &lt;i&gt;nobody&lt;/i&gt;&amp;nbsp;was thinking about people doing TDD :(&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Getting around this was easy enough by simply overriding the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.thread.currentprincipal.aspx&quot;&gt;Principal&lt;/a&gt; using the built in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.principal.genericprincipal.aspx&quot;&gt;GenericPrincipal&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx&quot;&gt;GenericIdentity&lt;/a&gt; classes. We even refactored the security setup code into the Initialize method for our unit tests. However, &lt;b&gt;we still had to think about security for every test class!&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;I can tell you right now that that is a big fat suck! I don't want to see &lt;i&gt;any&lt;/i&gt;&amp;nbsp;security related code in my unit test because &lt;b&gt;I'm not testing security right now!&lt;/b&gt;&amp;nbsp;What I really want is for my test to look like this and just work.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;[TestMethod]&lt;br /&gt;public void ShouldGetSuperSecretFromAgent()&lt;br /&gt;{&lt;br /&gt;    var agent = new SecretAgent();&lt;br /&gt;&lt;br /&gt;    //This line will esplode!!!&lt;br /&gt;    var secret = agent.GetSuperSecretStuff();&lt;br /&gt;&lt;br /&gt;    Assert.IsNotNull(secret);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Fortunately, we still have one last trick up our sleeve that we can use to solve our problem once and for all. Writing a custom implementation of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.principal.iprincipal.aspx&quot;&gt;IPrincipal&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.principal.iidentity.aspx&quot;&gt;IIdentity&lt;/a&gt;. This is so braindead simple, that I'm not even going to explain it... just show you the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;public class StubPrincipal: IPrincipal, IIdentity&lt;br /&gt;{&lt;br /&gt;    public StubPrincipal(String name = &quot;TestUser&quot;, Boolean isAuthenticated = true, String authenticationType = &quot;Fake&quot;)&lt;br /&gt;    {&lt;br /&gt;        Name = name;&lt;br /&gt;        IsAuthenticated = isAuthenticated;&lt;br /&gt;        AuthenticationType = authenticationType;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    //IPrincipal Members&lt;br /&gt;    public IIdentity Identity&lt;br /&gt;    {&lt;br /&gt;        get { return this; }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public bool IsInRole(string role)&lt;br /&gt;    {&lt;br /&gt;        return true;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    //IIdentity Members&lt;br /&gt;    public string AuthenticationType { get; set; }&lt;br /&gt;&lt;br /&gt;    public bool IsAuthenticated { get; set; }&lt;br /&gt;&lt;br /&gt;    public string Name { get; set; }&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This still leaves the business of wiring it all up. Since the whole point of this refactoring was to &lt;i&gt;not&lt;/i&gt;&amp;nbsp;have to worry about doing this for every test!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;All your base class are belong to us!&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;The simplest approach I can think of is to create a base class that will wire up your custom &lt;b&gt;StubPrincipal&lt;/b&gt; object in the constructor, and then derive all your test classes from it. Again, this is so braindead simple... just look at the code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;public class SecurityEnabledTest&lt;br /&gt;{&lt;br /&gt;    protected StubPrincipal Principal = new StubPrincipal();&lt;br /&gt;&lt;br /&gt;    public SecurityEnabledTest()&lt;br /&gt;    {&lt;br /&gt;        Thread.CurrentPrincipal = Principal;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And now our goal above is reached with one tiny modification.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;[TestClass]&lt;br /&gt;public class SecretAgentBehavior_UsingBaseClass: SecurityEnabledTest&lt;br /&gt;{&lt;br /&gt;    [TestMethod]&lt;br /&gt;    [Description(&quot;Test relying on base class to set principal&quot;)]&lt;br /&gt;    public void ShouldGetSuperSecretFromAgent()&lt;br /&gt;    {&lt;br /&gt;        var agent = new SecretAgent();&lt;br /&gt;&lt;br /&gt;        //It works... WOOT!&lt;br /&gt;        var secret = agent.GetSuperSecretStuff();&lt;br /&gt;&lt;br /&gt;        Assert.IsNotNull(secret);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Voila! Now you can go on your merry little way and focus on the actual method behavior instead of the security meta-data.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;But Wait! There is even more awesome!&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;If you are thinking to yourself &quot;Ok, that is great dude, but what if I actually want to test MY FREAKING SECURITY!&quot;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I've got you covered. Here is a slightly &lt;a href=&quot;https://gist.github.com/1708922&quot;&gt;more robust Principal object&lt;/a&gt; that will give you a lot more control over how it behaves, which should cover any testing scenario you can think of. It allows you to add roles, and has three modes of operation:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Always Return True&lt;/li&gt;&lt;li&gt;Whitelist&lt;/li&gt;&lt;ol&gt;&lt;li&gt;This is how a normal principal operates. If the role is in the list, then you get access.&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Blacklist&lt;/li&gt;&lt;ol&gt;&lt;li&gt;This works opposite to a normal principal. If the role is in the list, then you get denied access. This is useful for when there are multiple roles needed to perform an action (think nested calls), and you want to see how your code behaves when the user &lt;i&gt;doesn't&lt;/i&gt;&amp;nbsp;have one of them.&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div&gt;In the end I hope this helps unit testing efforts, and maybe demystifies the Principal/Identity objects a little bit. You can even use these same techniques to write your own custom security Principal for actual production uses. The concepts are identical.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Cheers,&lt;/div&gt;&lt;div&gt;Josh&lt;/div&gt;


</description>
      <pubDate>Tue, 31 Jan 2012 00:00:00 -0500</pubDate>
      <guid>http://www.technofattie.com/2012/01/31/it%27s-the-principal.html</guid>
      <dc:date>2012-01-31T00:00:00-05:00</dc:date>
    </item>
    <item>
      <title>Recursive Validation Using DataAnnotations</title>
      <link>http://www.technofattie.com/2011/10/05/recursive-validation-using-dataannotations.html</link>
      <description>&lt;p&gt;I saw a &lt;a href=&quot;http://stackoverflow.com/questions/7663501/dataannotations-recursively-validating-an-entire-object-graph&quot;&gt;post on Stackoverflow&lt;/a&gt; today that piqued my interest.&lt;/p&gt;
</description>
      <pubDate>Wed, 05 Oct 2011 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2011/10/05/recursive-validation-using-dataannotations.html</guid>
      <dc:date>2011-10-05T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>Solving Ayende's Tax Woes</title>
      <link>http://www.technofattie.com/2011/09/23/solving-ayende%27s-tax-woes.html</link>
      <description>&lt;a href=&quot;http://ayende.com/blog/&quot;&gt;Oren Eini&lt;/a&gt;&amp;nbsp;(a.k.a. Ayende Rahien)&amp;nbsp;is going through the joy that is &lt;a href=&quot;http://ayende.com/blog/102403/pet-projects-and-hiring-decisions&quot;&gt;trying to find good developers&lt;/a&gt;. The other day he posted some sample code that an interviewee had turned in to a coding challenge. The &lt;a href=&quot;http://ayende.com/blog/102401/negative-hiring-decisions-part-i&quot;&gt;results&lt;/a&gt; weren't pretty!&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The problem involves calculating a persons taxes based on a set of tax brackets.&amp;nbsp;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;It makes a great interview question because the problem is short enough to get done in an hour or so, but tricky enough to require some thought. Here are the specs as &lt;a href=&quot;http://ayende.com/blog/108545/the-tax-calculation-challenge&quot;&gt;posted by Ayende&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;&lt;b&gt;&lt;u&gt;Israel's Tax Brackets:&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: white; color: #333333; font-family: georgia, verdana, arial, sans-serif; font-size: 16px; line-height: 16px;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;table border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; style=&quot;-webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; border-bottom-width: 0px; border-collapse: collapse; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline; width: 400px;&quot;&gt;&lt;tbody style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;tr style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;&lt;/td&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;Tax Rate&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;Up to 5,070&lt;/td&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;10%&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;5,071 up to 8,660&lt;/td&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;14%&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;8,661 up to 14,070&lt;/td&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;23%&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;14,071 up to 21,240&lt;/td&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;30%&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;21,241 up to 40,230&lt;/td&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;33%&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;Higher than 40,230&lt;/td&gt;&lt;td style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 0.9em; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot; valign=&quot;top&quot; width=&quot;200&quot;&gt;45%&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;table border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; style=&quot;-webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; border-bottom-width: 0px; border-collapse: collapse; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline; width: 400px;&quot;&gt;&lt;tbody style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: white; color: #333333; font-family: georgia, verdana, arial, sans-serif; font-size: 16px; line-height: 16px;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Acceptance Tests:&lt;/u&gt;&lt;/b&gt;&amp;nbsp;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;ul style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; list-style-type: disc; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 40px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;li style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;5,000 –&amp;gt; 500&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; list-style-type: disc; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 40px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;li style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;5,800 –&amp;gt; 609.2&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; list-style-type: disc; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 40px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;li style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;9,000 –&amp;gt; 1087.8&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; list-style-type: disc; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 40px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;li style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;15,000 –&amp;gt; 2532.9&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; list-style-type: disc; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 40px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;&lt;li style=&quot;background-attachment: initial; background-clip: initial; background-color: transparent; background-image: initial; background-origin: initial; background-position: initial initial; background-repeat: initial initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-size: 16px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; outline-color: initial; outline-style: initial; outline-width: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;&quot;&gt;50,000 –&amp;gt; 15,068.1&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;Having not yet read the other comments or solutions, I thought it would be fun to take a crack at writing my own solution to the problem.&lt;br /&gt;&lt;br /&gt;I am a huge proponent of unit testing, and more specifically &lt;b&gt;T&lt;/b&gt;est &lt;b&gt;D&lt;/b&gt;riven &lt;b&gt;D&lt;/b&gt;evelopment. Since we have a nice set of acceptance tests, it is pretty easy to get those into code.&lt;br /&gt;&lt;br /&gt;I started with the simplest of tests I could think of.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c-sharp&quot; name=&quot;code&quot;&gt;[TestMethod]&lt;br /&gt;public void ShouldCalculateTotalTaxesToBeZero() {&lt;br /&gt;   var effectiveTax = new EffectiveTax();&lt;br /&gt;&lt;br /&gt;   var result = effectiveTax.CalculateTaxes(0);&lt;br /&gt;&lt;br /&gt;   Assert.AreEqual(0, result);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Which led me to create this simple implementation.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c-sharp&quot; name=&quot;code&quot;&gt;public class EffectiveTax &lt;br /&gt;{      &lt;br /&gt;   public Decimal CalculateTaxes(Decimal grossIncome) &lt;br /&gt;   {&lt;br /&gt;      return 0;&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Alright, so not very useful. But the tests pass!&lt;br /&gt;&lt;br /&gt;Now we need to be able to expand on this a bit and add a tax bracket in the mix.&amp;nbsp;A tax bracket has some lower-bound, and a rate.&amp;nbsp;We can write another pretty simple test for that.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c-sharp&quot; name=&quot;code&quot;&gt;[TestMethod]&lt;br /&gt;public void ShouldCalculateTaxesUsingSingleTaxBracket() {&lt;br /&gt;   var effectiveTax = new EffectiveTax();&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 0, taxRate: 0.1M);&lt;br /&gt;&lt;br /&gt;   Assert.AreEqual(0, effectiveTax.CalculateTaxes(0));&lt;br /&gt;   Assert.AreEqual(100, effectiveTax.CalculateTaxes(1000));&lt;br /&gt;   Assert.AreEqual(1000, effectiveTax.CalculateTaxes(10000));&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;i&gt;(Note: The use of named parameters is to aid in the design process. Since I wrote the code before the method existed, the IDE can infer the parameter names and automatically generate a signature for me. Also, it helps to clarify what is going on in the test.)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;We Add just enough code to get the tests passing, which is certainly more useful than the previous iteration, but far from complete. Some might object to my introducing a &lt;b&gt;TaxBracket&lt;/b&gt; type into the mix so early, but writing just enough code doesn't preclude one from writing clean code. The extra type helps to tidy things up, and makes future refactoring work easier with little extra work.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c-sharp&quot; name=&quot;code&quot;&gt;public class EffectiveTax {&lt;br /&gt;&lt;br /&gt;   private TaxBracket _taxBracket;&lt;br /&gt;&lt;br /&gt;   public Decimal CalculateTaxes(Decimal grossIncome) {&lt;br /&gt;      return grossIncome * _taxBracket.TaxRate;&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   public void AddTaxBracket(Decimal lowerBound, Decimal taxRate) {&lt;br /&gt;      _taxBracket = new TaxBracket {&lt;br /&gt;         LowerBound = lowerBound,&lt;br /&gt;         TaxRate = taxRate&lt;br /&gt;      };&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   private class TaxBracket {&lt;br /&gt;      internal Decimal LowerBound { get; set; }&lt;br /&gt;      internal Decimal TaxRate { get; set; }&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;This rev is also incomplete since it doesn't take the lower-bound into account. So... we write another test case to cover that scenario.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c-sharp&quot; name=&quot;code&quot;&gt;[TestMethod]&lt;br /&gt;public void ShouldCalculateOnlyTaxableIncome() {&lt;br /&gt;   var effectiveTax = new EffectiveTax();&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 5000, taxRate: 0.1M);&lt;br /&gt;&lt;br /&gt;   Assert.AreEqual(0, effectiveTax.CalculateTaxes(0));&lt;br /&gt;   Assert.AreEqual(0, effectiveTax.CalculateTaxes(4999));&lt;br /&gt;   Assert.AreEqual(0, effectiveTax.CalculateTaxes(5000));&lt;br /&gt;   Assert.AreEqual(10, effectiveTax.CalculateTaxes(5100));&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;A minor change to the code, and now we can effectively handle a single flat tax, with an optional poverty line.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c-sharp&quot; name=&quot;code&quot;&gt;public Decimal CalculateTaxes(Decimal grossIncome) {&lt;br /&gt;   var effectiveTax = 0.0M;&lt;br /&gt;         &lt;br /&gt;   if (grossIncome &gt; _taxBracket.LowerBound) {&lt;br /&gt;      var taxableIncome = grossIncome - _taxBracket.LowerBound;&lt;br /&gt;            &lt;br /&gt;      effectiveTax = taxableIncome * _taxBracket.TaxRate;&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   return effectiveTax;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;However, what we want is a system with multiple tax brackets. Now we get to the testing scenario that was previously laid out for us. We can easily translate those tables into a test.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c-sharp&quot; name=&quot;code&quot;&gt;[TestMethod]&lt;br /&gt;public void ShouldCalculateTaxUsingIsraelsTaxBrackets() {&lt;br /&gt;   var effectiveTax = new EffectiveTax();&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 0, taxRate: 0.1M);&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 5070, taxRate: 0.14M);&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 8660, taxRate: 0.23M);&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 14070, taxRate: 0.30M);&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 21240, taxRate: 0.33M);&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 40230, taxRate: 0.45M);&lt;br /&gt;&lt;br /&gt;   Assert.AreEqual(0, effectiveTax.CalculateTaxes(0));&lt;br /&gt;   Assert.AreEqual(500, effectiveTax.CalculateTaxes(5000));&lt;br /&gt;   Assert.AreEqual(609.2M, effectiveTax.CalculateTaxes(5800));&lt;br /&gt;   Assert.AreEqual(1087.8M, effectiveTax.CalculateTaxes(9000));&lt;br /&gt;   Assert.AreEqual(2532.9M, effectiveTax.CalculateTaxes(15000));&lt;br /&gt;   Assert.AreEqual(15068.1M, effectiveTax.CalculateTaxes(50000));&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;It was obvious that we needed some sort of collection to hold the TaxBrackets, and that we would need to loop over them to calculate the effective tax. The decision to reverse the loop, greatly simplifies the processing.&lt;br /&gt;&lt;br /&gt;Essentially we start with the highest amount of money that has a tax rate, and chop off that amount from the total amount remaining, taxing each chunk as we go and adding it to the total.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c-sharp&quot; name=&quot;code&quot;&gt;public class EffectiveTax {&lt;br /&gt;&lt;br /&gt;   private readonly List&lt;taxbracket&gt; _taxBrackets = new List&lt;taxbracket&gt;();&lt;br /&gt;&lt;br /&gt;   public Decimal CalculateTaxes(Decimal grossIncome) {&lt;br /&gt;      var effectiveTax = 0.0M;&lt;br /&gt;      var incomeLeftToTax = grossIncome;&lt;br /&gt;&lt;br /&gt;      for (var i = (_taxBrackets.Count - 1); i &gt;= 0; i--) {&lt;br /&gt;         var taxBracket = _taxBrackets[i];&lt;br /&gt;&lt;br /&gt;         if (incomeLeftToTax &gt; taxBracket.LowerBound) {&lt;br /&gt;            var taxableIncome = incomeLeftToTax - taxBracket.LowerBound;&lt;br /&gt;&lt;br /&gt;            incomeLeftToTax -= taxableIncome;&lt;br /&gt;            effectiveTax += taxableIncome * taxBracket.TaxRate;&lt;br /&gt;         }&lt;br /&gt;      }&lt;br /&gt;&lt;br /&gt;      return effectiveTax;&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   public void AddTaxBracket(Decimal lowerBound, Decimal taxRate) {&lt;br /&gt;      _taxBrackets.Add(new TaxBracket {&lt;br /&gt;         LowerBound = lowerBound,&lt;br /&gt;         TaxRate = taxRate&lt;br /&gt;      });&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   private class TaxBracket {&lt;br /&gt;      internal Decimal LowerBound { get; set; }&lt;br /&gt;      internal Decimal TaxRate { get; set; }&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;&lt;/taxbracket&gt;&lt;/taxbracket&gt;&lt;/pre&gt;&lt;br /&gt;Finally we need to address a massive assumption with the current&amp;nbsp;implementation. Mainly, that the tax brackets are in ascending order based on their lower bound. That is a pretty big assumption, and one that could lead to nasty bugs in the future.&lt;br /&gt;&lt;br /&gt;For our last test, we mix up the ordering of the tax brackets and make sure everything still works.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c-sharp&quot; name=&quot;code&quot;&gt;[TestMethod]&lt;br /&gt;public void ShouldCorrectlyOrderTaxBrackets() {&lt;br /&gt;   var effectiveTax = new EffectiveTax();&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 40230, taxRate: 0.45M);&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 14070, taxRate: 0.30M);&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 0, taxRate: 0.1M);&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 8660, taxRate: 0.23M);&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 21240, taxRate: 0.33M);&lt;br /&gt;   effectiveTax.AddTaxBracket(lowerBound: 5070, taxRate: 0.14M);&lt;br /&gt;&lt;br /&gt;   Assert.AreEqual(0, effectiveTax.CalculateTaxes(0));&lt;br /&gt;   Assert.AreEqual(500, effectiveTax.CalculateTaxes(5000));&lt;br /&gt;   Assert.AreEqual(609.2M, effectiveTax.CalculateTaxes(5800));&lt;br /&gt;   Assert.AreEqual(1087.8M, effectiveTax.CalculateTaxes(9000));&lt;br /&gt;   Assert.AreEqual(2532.9M, effectiveTax.CalculateTaxes(15000));&lt;br /&gt;   Assert.AreEqual(15068.1M, effectiveTax.CalculateTaxes(50000));&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Clearly this fails miserably so with a little adjustment to our method, we can ensure the ordering is correct before we start processing. The added benefit is that the code is now even more expressive than the explicit for loop from the previous iteration.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c-sharp&quot; name=&quot;code&quot;&gt;public Decimal CalculateTaxes(Decimal grossIncome) {&lt;br /&gt;   var effectiveTax = 0.0M;&lt;br /&gt;   var incomeLeftToTax = grossIncome;&lt;br /&gt;&lt;br /&gt;   var orderedBrackets = _taxBrackets.OrderByDescending(tb =&gt; tb.LowerBound);&lt;br /&gt;&lt;br /&gt;   foreach (var taxBracket in orderedBrackets) {&lt;br /&gt;      if (incomeLeftToTax &gt; taxBracket.LowerBound) {&lt;br /&gt;         var taxableIncome = incomeLeftToTax - taxBracket.LowerBound;&lt;br /&gt;&lt;br /&gt;         incomeLeftToTax -= taxableIncome;&lt;br /&gt;         effectiveTax += taxableIncome * taxBracket.TaxRate;&lt;br /&gt;      }&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   return effectiveTax;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Now, there are some clear omissions here, like checking for negative values, but I think it accomplished the spirit of the question.&lt;br /&gt;&lt;br /&gt;As I stated previously I haven't read any of the other solutions, so this may be an exact duplicate. Also, there may be much more elegant solutions to this problem, but as usual TDD has lead to something that is neat, clean, and well tested :)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;


</description>
      <pubDate>Fri, 23 Sep 2011 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2011/09/23/solving-ayende%27s-tax-woes.html</guid>
      <dc:date>2011-09-23T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>Unit Testing and Declarative Security, Part 2</title>
      <link>http://www.technofattie.com/2011/04/08/unit-testing-and-declarative-security-part-2.html</link>
      <description>&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.technofattie.com/2011/02/unit-testing-and-declarative-security.html&quot;&gt;See Part 1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.technofattie.com/2012/01/its-principal.html&quot;&gt;And Part 3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;a href=&quot;http://technofattie.blogspot.com/2011/02/unit-testing-and-declarative-security.html&quot;&gt;In a previous post&lt;/a&gt; I talked about using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.permissions.principalpermissionattribute.aspx&quot;&gt;PrincipalPermissionAttribute&lt;/a&gt; to achieve some last resort security that was tightly integrated into the framework.&lt;br /&gt;&lt;br /&gt;The nice thing about this approach is that you don't have to worry about some other programmer forgetting to check security before calling a method in your API. The bad news is because of the tight integration, Unit Testing becomes a little tricker. Since there is not a security service to mock, we have to get our hands dirty and actually set the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.thread.currentprincipal.aspx&quot;&gt;Principal&lt;/a&gt; so the method calls won't fail at runtime.&lt;br /&gt;&lt;br /&gt;We got around this last time by using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.principal.genericprincipal.aspx&quot;&gt;GenericPrincipal&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx&quot;&gt;GenericIdentity&lt;/a&gt;, two classes provided for us by the FCL writers. However, the added code distracts from the test we really want to write. Lets look at that example again.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;[TestMethod]&lt;br /&gt;public void ShouldGetSuperSecretFromAgentUsingGenericPrincipalAndIdentity()&lt;br /&gt;{&lt;br /&gt;    var awesomeSauce = new GenericPrincipal(&lt;br /&gt;            new GenericIdentity(&quot;jbond&quot;), new[] { &quot;007&quot; }&lt;br /&gt;        );&lt;br /&gt;&lt;br /&gt;    Thread.CurrentPrincipal = awesomeSauce;&lt;br /&gt;&lt;br /&gt;    var agent = new SecretAgent();&lt;br /&gt;&lt;br /&gt;    var secret = agent.GetSuperSecretStuff();&lt;br /&gt;&lt;br /&gt;    Assert.IsNotNull(secret);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;So this isn't terrible right now, but it is code that will have to be repeated over and over again for each test that calls that method. In this scenario we really aren't interested in testing the security, but rather the guts of the method. We want to test security, but not in this method. Ok, let's start DRYing up this code.&lt;br /&gt;&lt;br /&gt;The easiest and simplest choice would be to just refactor out the code into a method, and then call it before our test. This is simple enough to do.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;[TestMethod]&lt;br /&gt;public void ShouldGetSuperSecretFromAgentUsingGenericPrincipalAndIdentity()&lt;br /&gt;{&lt;br /&gt;    SetUserRoles(&quot;007&quot;);&lt;br /&gt;&lt;br /&gt;    var agent = new SecretAgent();&lt;br /&gt;&lt;br /&gt;    var secret = agent.GetSuperSecretStuff();&lt;br /&gt;&lt;br /&gt;    Assert.IsNotNull(secret);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private void SetUserRoles(params String[] roles)&lt;br /&gt;{&lt;br /&gt;    if(roles == null || roles.Length == 0) return;&lt;br /&gt;&lt;br /&gt;    var principal = new GenericPrincipal(&lt;br /&gt;            new GenericIdentity(&quot;jbond&quot;), roles&lt;br /&gt;        );&lt;br /&gt;&lt;br /&gt;    Thread.CurrentPrincipal = principal;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;That is slightly better, and gives a much better indication of what is going on when looking at the test, but I still don't like it for a couple of reasons:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The call to SetUserRoles still takes away from the purpose of the test. Remember this test isn't about security, but the behavior of the method itself. Everytime you look at this test you will first have to figure out why the security is there, and this increases friction and slows down the &lt;a href=&quot;http://jamesshore.com/Blog/Red-Green-Refactor.html&quot;&gt;RED/GREEN/REFACTOR&lt;/a&gt; cycle.&lt;/li&gt;&lt;li&gt;Code is still repeated because everytime we test a path through any method with security we will have to make a call to SetUserRoles, and that sucks. Any code that can be copied and pasted is worth your time to refactor.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;I really want to get to not thinking about security when I write my tests, so let's see if we can at least do that. Those of you familiar with any of the major &lt;a href=&quot;http://www.nunit.org/&quot;&gt;Unit&lt;/a&gt; &lt;a href=&quot;http://www.gallio.org/&quot;&gt;Testing&lt;/a&gt; &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182486.aspx&quot;&gt;Frameworks&lt;/a&gt; will know that they all have an attribute that designates one method that will run before every test is run. In MSTest it is the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.testinitializeattribute(v=VS.100).aspx&quot;&gt;TestInitializeAttribute&lt;/a&gt;. We can use that to neatly tuck our security code away into a single method so we don't have to repeat it for every test.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;[TestInitialize]&lt;br /&gt;public void Init()&lt;br /&gt;{&lt;br /&gt;    SetUserRoles(&quot;007&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;[TestMethod]&lt;br /&gt;public void ShouldGetSuperSecretFromAgentUsingGenericPrincipalAndIdentity()&lt;br /&gt;{&lt;br /&gt;    var agent = new SecretAgent();&lt;br /&gt;&lt;br /&gt;    var secret = agent.GetSuperSecretStuff();&lt;br /&gt;&lt;br /&gt;    Assert.IsNotNull(secret);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;//SetUserRoles Method&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Now, this is certainly a lot better than the previous version since we only have to call SetUserRoles in one place. Also, our test method is free from the security clutter so we don't have any mental road blocks while reading the test. However, I am still not very happy with the end result. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;Why?&lt;/b&gt; &lt;br /&gt;&lt;br /&gt;Remember when I said I didn't want to have to &lt;i&gt;think&lt;/i&gt; about the security while writing my tests? Well... I still do. Everytime I write a new method in my SUT, I will no doubt add another security attribute to it. Or, I will write a test to cover security, and then add the attribute to make my test pass. Either way, I will have to come back to the Init method and add another role to the list.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Nothing will cripple your unit testing efforts faster than brittle, hard to maintain tests!&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;So how do we get around this? Ok so I already told you in Part 1 that we could build a custom Principal and Identity in order to achieve the desired results, but I wanted to expound a little on the rationale for actually doing it.&lt;br /&gt;&lt;br /&gt;In &lt;a href=&quot;http://www.technofattie.com/2012/01/its-principal.html&quot;&gt;Part 3&lt;/a&gt; we solve all our problems (I promise!)&lt;br /&gt;&lt;/br&gt;&lt;br /&gt;&lt;/br&gt;


</description>
      <pubDate>Fri, 08 Apr 2011 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2011/04/08/unit-testing-and-declarative-security-part-2.html</guid>
      <dc:date>2011-04-08T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>WPF != Fancy Winforms</title>
      <link>http://www.technofattie.com/2011/02/11/wpf-fancy-winforms.html</link>
      <description>I'm a big fan of Stackoverflow, and I was just recently looking at this &lt;a href=&quot;http://stackoverflow.com/questions/4965023/c-check-if-text-file-has-content&quot;&gt;very simple question regarding changing button color.&lt;/a&gt; On the surface it seems this would warrant a very simple answer, and indeed &lt;a href=&quot;http://stackoverflow.com/questions/4965023/c-check-if-text-file-has-content/4965058#4965058&quot;&gt;Chris' Answer&lt;/a&gt; was simple, straightforward and to the point.&lt;br /&gt;&lt;br /&gt;However, it feels too much like how I would have done things back in the dark ages of WinForms. There seems to be this misconception that WPF is just a fancier version of the old Win32 standby. &lt;i&gt;(note I am not trying to imply this is what Chris thinks, it merely serves as a convenient backdrop for this post)&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;But WPF is not even a cousin, or distant relative of WinForms. If WPF saw WinForms in the hallway it would beat him up and take his lunch money from him. Anyway, that is enough of a rant. On with what started out as my original answer to the question, which turned into this epic post...&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;u&gt;Original Answer Starts Here:&lt;/u&gt;&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;So Chris' suggestion is pretty straightforward, and it is certainly easier to implement than what I am about to show you ;) However, if you are going to venture into the world of WPF then you need to experience what it has to offer.&lt;br /&gt;&lt;br /&gt;In my opinion the two biggest advantages in WPF are:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;The power and flexibility of the declarative model&lt;/li&gt;&lt;li&gt;An incredibly rich data binding infrastructure&lt;/li&gt;&lt;/ol&gt;Granted those are immensely deep topics within WPF, but without at least gaining a minimal understanding of those topics, it will be like driving a Lamborghini around in first gear all the time.&lt;br /&gt;&lt;br /&gt;That being said, you can jump to the full solution &lt;a href=&quot;#fullsolution&quot;&gt;here&lt;/a&gt;, copy and paste it into a clean solution, and play with it for a second. I'll be waiting patiently here to give you a detailed explanation of what is going on. &lt;br /&gt;&lt;br /&gt;Ready? Ok then, lets get going.&lt;br /&gt;&lt;br /&gt;Lets start with the core logic of the application, your requirements are:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;Examine a file on disk&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Change the appearance of a button based on content length&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Update the appearance of the button when the file changes&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;Since the appearance of the button is presentation specific, we simply won't worry about that when implementing our core logic. So what we really need to do is monitor the file for changes, and update a local variable with the length of the file, if it exists.&lt;br /&gt;&lt;br /&gt;This is a perfect job for a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.aspx&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;FileSystemWatcher&lt;/span&gt;&lt;/a&gt;. The file watcher kicks off a thread in the background which utilizes some low level Win32 API's to monitor events on the file system. We can tie into those events via the watcher, and handle them in our application asynchonously.&lt;br /&gt;&lt;br /&gt;Creating a new watcher is pretty simple and all we really need to provide is the Path. Here I am simply using the current location of the Executing Assembly for the base path. The second thing you see here is the Filter property. This works just like the filter you would use in the command line.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c#&quot; name=&quot;code&quot;&gt;private FileSystemWatcher _fileWatcher;&lt;br /&gt;private const String FileToWatch = &quot;tempfile.txt&quot;;&lt;br /&gt;&lt;br /&gt;public void InitializeFileWatcher()&lt;br /&gt;{&lt;br /&gt;    _fileWatcher = new FileSystemWatcher();&lt;br /&gt;    _fileWatcher.Path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);&lt;br /&gt;    _fileWatcher.Filter = &quot;*.txt&quot;;&lt;br /&gt;&lt;br /&gt;    //Snip...&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Next we want to subscribe to the different types of events available, and tell the watcher to start doing it's thing. In this case our event handler is just a thin wrapper around a simple method that does all the &quot;heavy&quot; lifting. Lastly we call our &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc; font-family: 'Courier New', Courier, monospace;&quot;&gt;UpdateFileLength&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: white; font-family: 'Courier New', Courier, monospace;&quot;&gt; &lt;/span&gt;method directly because we need to know what the status of the file is right now, without waiting on an event from our watcher.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c#&quot; name=&quot;code&quot;&gt;public void InitializeFileWatcher()&lt;br /&gt;{&lt;br /&gt;    //Snip...&lt;br /&gt;&lt;br /&gt;    _fileWatcher.Created += fileWatcher_Handler;&lt;br /&gt;    _fileWatcher.Changed += fileWatcher_Handler;&lt;br /&gt;    _fileWatcher.Deleted += fileWatcher_Handler;&lt;br /&gt;    _fileWatcher.Renamed += fileWatcher_Handler;&lt;br /&gt;&lt;br /&gt;    _fileWatcher.EnableRaisingEvents = true;&lt;br /&gt;&lt;br /&gt;    UpdateFileLength(Path.Combine(_fileWatcher.Path, FileToWatch));&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private void UpdateFileLength(string filePath)&lt;br /&gt;{&lt;br /&gt;    Int64? length = null;&lt;br /&gt;&lt;br /&gt;    if (Path.GetFileName(filePath) == FileToWatch)&lt;br /&gt;    {&lt;br /&gt;        var fi = new FileInfo(filePath);&lt;br /&gt;&lt;br /&gt;        if (fi.Exists)&lt;br /&gt;            length = fi.Length;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    Dispatcher.Invoke((Action)(&lt;br /&gt;        () =&amp;gt; FileContentLength = length)&lt;br /&gt;    );&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;void fileWatcher_Handler(object sender, FileSystemEventArgs e)&lt;br /&gt;{&lt;br /&gt;    UpdateFileLength(e.FullPath);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The UpdateFileLength method is pretty simple. It checks to see if the file is the one we are looking for, extracts the length if it exists, and updates a property on our MainWindow. Something that may seem a bit odd however, is the use of the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcher.aspx&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;Dispatcher&lt;/span&gt;&lt;/a&gt; and an anonymous method in order to set that property.&lt;br /&gt;&lt;br /&gt;Remember how I said that the &lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;FileSystemWatcher&lt;/span&gt; kicks off a background thread. Well, technically &lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;UpdateFileLength&lt;/span&gt; could be getting executed from a different thread than the UI thread. And well... it's a big NO NO to access things in the UI from another thread. Without going into a a lot of detail, the Dispatcher is responsible for scheduling things to happen on the UI thread in WPF. Here we are ensuring that no matter what thread executes this method, that that line will always be executed on the UI thread.&lt;br /&gt;&lt;br /&gt;Ok, so the last little bit is our property we use to store the current length of the file we are monitoring, but it is no ordinary property.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c#&quot; name=&quot;code&quot;&gt;public static readonly DependencyProperty FileContentLengthProperty = DependencyProperty.Register(&lt;br /&gt;    &quot;FileContentLength&quot;,&lt;br /&gt;    typeof(Int64?),&lt;br /&gt;    typeof(MainWindow),&lt;br /&gt;    new UIPropertyMetadata(null));&lt;br /&gt;&lt;br /&gt;public Int64? FileContentLength&lt;br /&gt;{&lt;br /&gt;    get&lt;br /&gt;    {&lt;br /&gt;        return (Int64?)GetValue(FileContentLengthProperty);&lt;br /&gt;    }&lt;br /&gt;    set&lt;br /&gt;    {&lt;br /&gt;        SetValue(FileContentLengthProperty, value);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;What you are staring at here is known as a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms752914.aspx&quot;&gt;DependencyProperty&lt;/a&gt;, and they are pretty foundational to how WPF works, so take some time to learn about them. For our purposes, just know that what this provides for us is a way for WPF to monitor changes to our property, which allows for all sorts of fun stuff in the UI.&lt;br /&gt;&lt;br /&gt;Now, on to the UI and where the real magic happens. Did you notice we didn't ever reference any buttons or set colors in the code behind? That's because 99% of the time in WPF there is no need to. The declarative model we have in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms752059.aspx&quot;&gt;XAML&lt;/a&gt; combined with the rich data binding ecosystem in WPF gives us the freedom to finally have true seperation of concerns between presentation and logic.&lt;br /&gt;&lt;br /&gt;The first order of business is to set the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.datacontext.aspx&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;DataContext&lt;/span&gt;&lt;/a&gt; on the Window itself so that we can access all of the properties defined in our code behind. Ok there is only one, but we still need it.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;xml&quot; name=&quot;code&quot;&gt;DataContext=&quot;{Binding RelativeSource={RelativeSource Self}}&quot;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Next we need a button on our window. Ok, nothing special going on here, except that there is no content, no coloring, just a Style property bound to some static resource called &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc0000;&quot;&gt;&quot;FileBoundButton&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;textarea class=&quot;xml&quot; name=&quot;code&quot;&gt;&lt;br /&gt;&lt;button Style=&quot;{StaticResource FileBoundButton}&quot;                  Name=&quot;button1&quot; /&gt;&lt;br /&gt;&lt;/textarea&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms745683.aspx&quot;&gt;Styles in WPF are another big complex topic&lt;/a&gt;, but just know that this isn't anything like CSS. You can set virtually any property on an element via a style, and include declarative triggers to change the appearance based on events, data, or even other elements. This is precisely how we are going to achieve the visual affect you are after and then some!&lt;br /&gt;&lt;br /&gt;&lt;textarea class=&quot;xml&quot; name=&quot;code&quot;&gt;&lt;br /&gt;&lt;style x:Key=&quot;FileBoundButton&quot; TargetType=&quot;ContentControl&quot;&gt;    &lt;setter Property=&quot;Background&quot; Value=&quot;Green&quot; /&gt;    &lt;setter Property=&quot;Content&quot; Value=&quot;{Binding FileContentLength}&quot; /&gt;    &lt;Style.Triggers&gt;        &lt;datatrigger Binding=&quot;{Binding FileContentLength}&quot; Value=&quot;{x:Null}&quot;&gt;            &lt;setter Property=&quot;Background&quot; Value=&quot;LightGray&quot; /&gt;            &lt;setter Property=&quot;Content&quot; Value=&quot;No File!&quot; /&gt;        &lt;/DataTrigger&gt;        &lt;datatrigger Binding=&quot;{Binding FileContentLength}&quot; Value=&quot;0&quot;&gt;            &lt;setter Property=&quot;Background&quot; Value=&quot;Red&quot; /&gt;        &lt;/DataTrigger&gt;    &lt;/Style.Triggers&gt;&lt;/Style&gt;&lt;br /&gt;&lt;/textarea&gt;&lt;br /&gt;&lt;br /&gt;The style we are using is declared as a static resource on the window itself. You need a name if you want to be able to refer to it later, and using a TargetType of ContentControl instead of a Button means we could reuse this style a lot of different elements, not just a button.&lt;br /&gt;&lt;br /&gt;We set the Background property to Green initially, and we also set the Content equal to the value of our &lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;FileContentLength&lt;/span&gt; property. Then we make use of DataTriggers to alter those settings based on the value of FileContentLength. The syntax of a DataTrigger can be a bit wonky at first, but if you were to spell it out in pseudo-code it would sound something like this:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;set the Background property to &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: lime;&quot;&gt;Green&lt;/span&gt;&lt;br /&gt;set the Content to DataContext.FileContentLength&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: blue;&quot;&gt;IF&lt;/span&gt; the value of DataContext.FileContentLength is &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: red;&quot;&gt;NULL&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: blue;&quot;&gt;THEN&lt;/span&gt; set the Background property to &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc;&quot;&gt;LightGray&lt;/span&gt; &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: blue;&quot;&gt;AND&lt;/span&gt;&lt;br /&gt;         set the Content to &quot;No File!&quot;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: blue;&quot;&gt;ELSE IF&lt;/span&gt; the value of DataContext.FileContentLength is &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: red;&quot;&gt;0&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: blue;&quot;&gt;THEN&lt;/span&gt; set the Background property to &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: red;&quot;&gt;Red&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You might be wondering exactly &lt;i&gt;what&lt;/i&gt;&amp;nbsp;DataContext this is referring to. Essentially whatever framework element this style happens to be applied to. Because we didn't set the Button's DataContext explicitely it will inherit the DataContext of the Window. But be careful! Where the DataContext comes from isn't always apparent.&lt;br /&gt;&lt;br /&gt;Now, if you put all this together and launch the app for the first time you should end up with a small window with a gray button in it that says &quot;No File!&quot;&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_zrLYGpcNAqw/TVTfmg2jvoI/AAAAAAAAA18/PrNnn4ucwoc/s800/FileWatcher_NoFile.png&quot;&gt;&lt;/img&gt;&lt;/center&gt;&lt;br /&gt;&lt;br /&gt;Without closing the program, navigate to the executing directory of your application &quot;[ProjectFolder]\bin\Debug&quot; and create a new text file named &quot;tempfile.txt&quot; Now you should see the button change color to red and display a &quot;0&quot; since the file is empty.&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_zrLYGpcNAqw/TVTfmYRStiI/AAAAAAAAA10/pBNoBbSkEc0/s800/FileWatcher_EmptyFile.png&quot;&gt;&lt;/img&gt;&lt;/center&gt;&lt;br /&gt;&lt;br /&gt;Open the newly created text file and write something in there. Save the file and again, watch as your button magically changes before your eyes to green, and displaying &quot;N&quot; where N is the number of characters in your text file.&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_zrLYGpcNAqw/TVTfmQqJ5tI/AAAAAAAAA14/7jZ_skxgL4o/s800/FileWatcher_FileWithContent.png&quot;&gt;&lt;/img&gt;&lt;/center&gt;&lt;br /&gt;&lt;br /&gt;If you actually made it through this whole thing, then you have hopefully been opened up to a whole new world of possibilities by using WPF. Just remember that it is a very, very deep technology and you won't learn it over night. Here are some resources to get you started on your journey though.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms754130.aspx&quot;&gt;The MSDN Walk Through.&lt;/a&gt; Heavy reading, but worth it.&lt;br /&gt;&lt;a href=&quot;http://www.wpftutorial.net/christian.php&quot;&gt;Christian Moser's WPF Tutorial Site.&lt;/a&gt; Lots of easy to digest samples.&lt;br /&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/wpf&quot;&gt;WPF Questions on Stackoverflow&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a name=&quot;fullsolution&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;`MainWindow.xaml`:&lt;br /&gt;&lt;br /&gt;&lt;textarea class=&quot;xml:collapse&quot; name=&quot;code&quot;&gt;&lt;br /&gt;&lt;window x:Class=&quot;TechnoFattie.WPF.MainWindow&quot;         xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;         xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;         xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;         xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;         mc:Ignorable=&quot;d&quot; Height=&quot;86&quot; Width=&quot;174&quot;         Title=&quot;File Watcher Example&quot;         DataContext=&quot;{Binding RelativeSource={RelativeSource Self}}&quot;&gt;&lt;br /&gt;&lt;Window.Resources&gt;&lt;br /&gt;&lt;style x:Key=&quot;FileBoundButton&quot; TargetType=&quot;Control&quot;&gt;            &lt;setter Property=&quot;Background&quot; Value=&quot;Green&quot; /&gt;            &lt;Style.Triggers&gt;                &lt;datatrigger Binding=&quot;{Binding FileContentLength}&quot; Value=&quot;{x:Null}&quot;&gt;                    &lt;setter Property=&quot;Background&quot; Value=&quot;LightGray&quot; /&gt;                &lt;/DataTrigger&gt;                &lt;datatrigger Binding=&quot;{Binding FileContentLength}&quot; Value=&quot;0&quot;&gt;                    &lt;setter Property=&quot;Background&quot; Value=&quot;Red&quot; /&gt;                &lt;/DataTrigger&gt;            &lt;/Style.Triggers&gt;        &lt;/Style&gt;&lt;br /&gt;&lt;/Window.Resources&gt;&lt;br /&gt;&lt;grid x:Name=&quot;LayoutRoot&quot;&gt;&lt;br /&gt;&lt;button Content=&quot;{Binding FileContentLength}&quot;                  Style=&quot;{StaticResource FileBoundButton}&quot;                  Name=&quot;button1&quot; /&gt;&lt;br /&gt;&lt;/Grid&gt;&lt;br /&gt;&lt;/Window&gt;&lt;br /&gt;&lt;/textarea&gt;&lt;br /&gt;&lt;br /&gt;`MainWindow.xaml.cs`:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;c#:collapse&quot; name=&quot;code&quot;&gt;public partial class MainWindow : Window&lt;br /&gt;{&lt;br /&gt;    private FileSystemWatcher _fileWatcher;&lt;br /&gt;    private const String FileToWatch = &quot;tempfile.txt&quot;;&lt;br /&gt;&lt;br /&gt;    public MainWindow()&lt;br /&gt;    {&lt;br /&gt;        InitializeComponent();&lt;br /&gt;            &lt;br /&gt;        InitializeFileWatcher();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public void InitializeFileWatcher()&lt;br /&gt;    {&lt;br /&gt;        _fileWatcher = new FileSystemWatcher();&lt;br /&gt;        _fileWatcher.Path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);&lt;br /&gt;        _fileWatcher.Filter = &quot;*.txt&quot;;&lt;br /&gt;&lt;br /&gt;        _fileWatcher.Created += fileWatcher_Handler;&lt;br /&gt;        _fileWatcher.Changed += fileWatcher_Handler;&lt;br /&gt;        _fileWatcher.Deleted += fileWatcher_Handler;&lt;br /&gt;        _fileWatcher.Renamed += fileWatcher_Handler;&lt;br /&gt;&lt;br /&gt;        _fileWatcher.EnableRaisingEvents = true;&lt;br /&gt;&lt;br /&gt;        UpdateFileLength(Path.Combine(_fileWatcher.Path, FileToWatch));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    private void UpdateFileLength(string filePath)&lt;br /&gt;    {&lt;br /&gt;        Int64? length = null;&lt;br /&gt;&lt;br /&gt;        if (Path.GetFileName(filePath) == FileToWatch)&lt;br /&gt;        {&lt;br /&gt;            var fi = new FileInfo(filePath);&lt;br /&gt;&lt;br /&gt;            if (fi.Exists)&lt;br /&gt;                length = fi.Length;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        Dispatcher.Invoke((Action)(() =&amp;gt; FileContentLength = length));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    void fileWatcher_Handler(object sender, FileSystemEventArgs e)&lt;br /&gt;    {&lt;br /&gt;        UpdateFileLength(e.FullPath);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public Int64? FileContentLength&lt;br /&gt;    {&lt;br /&gt;        get&lt;br /&gt;        {&lt;br /&gt;            return (Int64?)GetValue(FileContentLengthProperty);&lt;br /&gt;        }&lt;br /&gt;        set&lt;br /&gt;        {&lt;br /&gt;            SetValue(FileContentLengthProperty, value);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static readonly DependencyProperty FileContentLengthProperty = DependencyProperty.Register(&lt;br /&gt;        &quot;FileContentLength&quot;,&lt;br /&gt;        typeof(Int64?),&lt;br /&gt;        typeof(MainWindow),&lt;br /&gt;        new UIPropertyMetadata(null));&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;


</description>
      <pubDate>Fri, 11 Feb 2011 00:00:00 -0500</pubDate>
      <guid>http://www.technofattie.com/2011/02/11/wpf-fancy-winforms.html</guid>
      <dc:date>2011-02-11T00:00:00-05:00</dc:date>
    </item>
    <item>
      <title>Unit Testing and Declarative Security, Part 1</title>
      <link>http://www.technofattie.com/2011/02/09/unit-testing-and-declarative-security-part-1.html</link>
      <description>&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://technofattie.blogspot.com/2011/04/unit-testing-and-declarative-security.html&quot;&gt;See Part 2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://technofattie.blogspot.com/2012/01/its-principal.html&quot;&gt;And Part 3&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Security is hard. If you think it isn't your software is probably just waiting to be exploited by this guy:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-LFBH0lmiDZk/TVNtn_VV0aI/AAAAAAAAA1k/f72-ZNQtWSM/s1600/EvilHacker.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-LFBH0lmiDZk/TVNtn_VV0aI/AAAAAAAAA1k/f72-ZNQtWSM/s1600/EvilHacker.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Knowing this, the guys who put together the .Net framework gave us a pretty brain-dead approach to adding security declaratively&lt;sup&gt;1&lt;/sup&gt; to our code using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.permissions.principalpermissionattribute.aspx&quot;&gt;PrincipalPermissionAttribute&lt;/a&gt;. Securing a method call becomes trivial this way.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;[PrincipalPermission(SecurityAction.Demand, Authenticated = true, Role = &quot;007&quot;)]&lt;br /&gt;public Secret GetSuperSecretStuff(){&lt;br /&gt;    return Vault.SuperSecret;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Anybody who calls this method will have to be operating under a security context that is both authenticated and a member of the &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000;&quot;&gt;&quot;007&quot;&lt;/span&gt; role. However, calling this method without meeting the requirements will throw a big fat Exception. This can make unit testing a bit tricky since you most likely will &lt;strong&gt;not&lt;/strong&gt; have the proper credentials. &lt;br /&gt;&lt;br /&gt;For instance suppose the above method were defined on a &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc; font-family: 'Courier New', Courier, monospace;&quot;&gt;SecretAgent&lt;/span&gt; type in my project and I wanted to write a unit test for it:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;[TestMethod]&lt;br /&gt;public void ShouldGetSuperSecretFromAgent()&lt;br /&gt;{&lt;br /&gt;    var agent = new SecretAgent();&lt;br /&gt;&lt;br /&gt;    var secret = agent.GetSuperSecretStuff();&lt;br /&gt;&lt;br /&gt;    Assert.IsNotNull(secret);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Running this code will result in a big fat exception, and your test output will read:&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #fff2cc; font-size: large;&quot;&gt;Test method TechnoFattie.Lib.Tests.SecretAgentBehavior.ShouldGetSuperSecretFromAgent threw exception: &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #fff2cc; font-size: large;&quot;&gt;System.Security.SecurityException: Request for principal permission failed.&lt;/span&gt;&lt;/blockquote&gt;&lt;br /&gt;Bummer :(&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Getting around this is pretty easy though if you understand how security works in the .Net framework.&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;Most security in .Net is centered around checking the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.thread.currentprincipal.aspx&quot;&gt;Principal on the currently executing thread&lt;/a&gt; to see if it contains a specific role, and using the &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc; font-family: 'Courier New', Courier, monospace;&quot;&gt;PrincipalPermissionAttribute&lt;/span&gt; is no exception.&lt;br /&gt;&lt;br /&gt;You could think of using security declared in this way as having wrapped every call to &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc; font-family: 'Courier New', Courier, monospace;&quot;&gt;GetSuperSecretStuff&lt;/span&gt; like this:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;if(Thread.CurrentPrincipal.IsInRole(&quot;007&quot;)){&lt;br /&gt;    var secret = GetSuperSecretStuff();&lt;br /&gt;}&lt;br /&gt;else{&lt;br /&gt;    throw new SecurityException(&quot;Request for principal permission failed.&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;What we need is a way to completely control the Principal. Fortunately for us, replacing the principal is as simple as setting a property. You can assign any principal you want to &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc; font-family: 'Courier New', Courier, monospace;&quot;&gt;Thread.Current.Principal&lt;/span&gt; so long as it implements the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.principal.iprincipal.aspx&quot;&gt;IPrincipal&lt;/a&gt; interface.&lt;br /&gt;&lt;br /&gt;If we look the &lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc;&quot;&gt;IPrincipal&lt;/span&gt; &lt;/span&gt;interface, we will notice it is pretty darn simple:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;public interface IPrincipal&lt;br /&gt;{&lt;br /&gt;    IIdentity Identity { get; }&lt;br /&gt;    bool IsInRole(string role);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;You will also notice that it contains an &lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc; font-family: 'Courier New', Courier, monospace;&quot;&gt;Identity&lt;/span&gt; property, another very simple interface:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;public interface IIdentity&lt;br /&gt;{&lt;br /&gt;    string AuthenticationType { get; }&lt;br /&gt;    bool IsAuthenticated { get; }&lt;br /&gt;    string Name { get; }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;We could implement our own classes here and use them, but I generally prefer the path of laziness. And wouldn't you know it, the hard working guys at Microsoft decided they would spare us the grueling work of implementing three entire properties and one method. Having pity on the lesser developers like myself, they gave us...&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.principal.genericprincipal.aspx&quot;&gt;GenericPrincipal&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx&quot;&gt;GenericIdentity&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Standing on the shoulders of these giants we can rewrite our test method to take advantage of the no doubt hundreds of man hours required to not only implement these classes, but to carefully name them as well.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;[TestMethod]&lt;br /&gt;public void ShouldGetSuperSecretFromAgentUsingGenericPrincipalAndIdentity()&lt;br /&gt;{&lt;br /&gt;    var awesomeSauce = new GenericPrincipal(&lt;br /&gt;            new GenericIdentity(&quot;jbond&quot;), new[] { &quot;007&quot; }&lt;br /&gt;        );&lt;br /&gt;&lt;br /&gt;    Thread.CurrentPrincipal = awesomeSauce;&lt;br /&gt;&lt;br /&gt;    var agent = new SecretAgent();&lt;br /&gt;&lt;br /&gt;    var secret = agent.GetSuperSecretStuff();&lt;br /&gt;&lt;br /&gt;    Assert.IsNotNull(secret);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Now our test will happily pass, and life is good once again. Security can seem like a somewhat mystical thing in .Net, but as you can see the underlying mechanics are pretty simple. &lt;a href=&quot;http://technofattie.blogspot.com/2011/04/unit-testing-and-declarative-security.html&quot;&gt;In the next installment&lt;/a&gt; I am actually going to implement a custom Principal type in order to be able to test more complicated security scenarios, and to reduce the amount of code needed to ease maintenance.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: x-small;&quot;&gt;&lt;i&gt;1. Don't mistake this approach for a real security solution however.  Ideally you should have already checked the user's credentials before hand and the method would never get called. This method is really only good as a fail-safe.&lt;/i&gt;&lt;/span&gt;


</description>
      <pubDate>Wed, 09 Feb 2011 00:00:00 -0500</pubDate>
      <guid>http://www.technofattie.com/2011/02/09/unit-testing-and-declarative-security-part-1.html</guid>
      <dc:date>2011-02-09T00:00:00-05:00</dc:date>
    </item>
    <item>
      <title>Extending Moq Using Extension Methods</title>
      <link>http://www.technofattie.com/2010/06/25/extending-moq-using-extension-methods.html</link>
      <description>&lt;p&gt;If you regularly use &lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;TDD&lt;/a&gt;, then you are familiar with the concept of mocking. If you don&amp;#39;t use TDD, then you need to slap yourself and apologize to &lt;a href=&quot;http://www.objectmentor.com/omTeam/martin_r.html&quot;&gt;Bob Martin&lt;/a&gt;, &lt;a href=&quot;http://www.objectmentor.com/omTeam/feathers_m.html&quot;&gt;Michael Feathers&lt;/a&gt; and &lt;a href=&quot;http://www.objectmentor.com/omTeam/jeffries_r.html&quot;&gt;Ron Jeffries&lt;/a&gt; immediately. I&amp;#39;ll wait here...&lt;/p&gt;
</description>
      <pubDate>Fri, 25 Jun 2010 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2010/06/25/extending-moq-using-extension-methods.html</guid>
      <dc:date>2010-06-25T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>QA, Being A Professional, And Waiting Tables</title>
      <link>http://www.technofattie.com/2010/05/04/qa-being-a-professional-and-waiting-tables.html</link>
      <description>If you are a little lost by the title, it will all make sense in a moment… um… sort of.&lt;br /&gt;&lt;br /&gt;Until I started my career as a software developer I worked a lot of other jobs. I have had a job since I was 16 years old, and that was just an excuse to get out of doing manual work for my parents around the house. I’ve worked as a bagger at a grocery store, cashier at a big-box-mart, usher, concessions, and box clerk for a movie theater, tech support for a DSL provider, general laborer for a masonry outfit, and the last job I worked before slinging code full-time was waiting tables.&lt;br /&gt;&lt;br /&gt;All of these jobs really have one thing in common: I was the person who always caught the tail end of the customer’s experience: whether it was good or bad… especially when it was bad!&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Read more at &lt;a href=&quot;http://thetestingblog.com/2010/04/08/qa-being-a-professional-and-waiting-tables/&quot;&gt;The Testing Blog&lt;/a&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;


</description>
      <pubDate>Tue, 04 May 2010 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2010/05/04/qa-being-a-professional-and-waiting-tables.html</guid>
      <dc:date>2010-05-04T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>Fear Of Success</title>
      <link>http://www.technofattie.com/2010/05/04/fear-of-success.html</link>
      <description>I was in the middle of making a rather lengthy comment on &lt;a href=&quot;http://thetestingblog.com/2010/04/30/exploratory-testing-and-a-prophet-without-honor/&quot;&gt;Daniel’s most recent blog post&lt;/a&gt; when I decided it was long enough to warrant a full posting.&lt;br /&gt;&lt;br /&gt;I wanted to get across the point that the situation Daniel finds himself in is not solely the plight of the software tester. Rather, anyone who esteems software quality runs the risk of being criticized, dismissed, or made fun of. Why is it that organizations and groups are so resistant to something that will improve their process, their product, and their bottom line. The idea is one I have been thinking a lot about, and I believe I have had an epiphany.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;Read more at &lt;a href=&quot;http://thetestingblog.com/2010/05/03/fear-of-success/&quot;&gt;The Testing Blog&lt;/a&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;


</description>
      <pubDate>Tue, 04 May 2010 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2010/05/04/fear-of-success.html</guid>
      <dc:date>2010-05-04T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>Custom Enum in strongly typed DataSet</title>
      <link>http://www.technofattie.com/2009/06/23/custom-enum-in-strongly-typed-dataset.html</link>
      <description>&lt;div style=&quot;text-align: left;&quot;&gt;Recently I found a question about &lt;a href=&quot;http://stackoverflow.com/questions/1035796/enum-in-dataset&quot;&gt;using Enums in a DataSet&lt;/a&gt; on &lt;a href=&quot;http://www.blogger.com/www.stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt;. I was a little dissapointed at the answers people provided that were either down right wrong, or overly complicated. Sometimes I think people are so hungry for reputation points they forget that they are supposed to be &lt;i&gt;answering&lt;/i&gt; questions.&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Anyway, one poster recommended using strongly typed DataSets, but then advocated partial classes, or modifying the generated code. While a strongly typed DataSet is the way to go, you don't have to do anything fancy to get enum support.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Lets say we have just created a DataSet, and dropped a single DataTable into it:&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src=&quot;http://2.bp.blogspot.com/_zrLYGpcNAqw/SkGNLW-5LkI/AAAAAAAAArw/cSOTIk5daTo/s320/EnumDataSet.jpg&quot; style=&quot;display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 186px; height: 75px;&quot; border=&quot;0&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5350713058580311618&quot; /&gt;&lt;div&gt;Normally &lt;b&gt;AwesomeId&lt;/b&gt; would just map to some integer key in a lookup table, and for whatever reason you have an enum that maps directly to this table in code:&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre name=&quot;code&quot; class=&quot;c#&quot;&gt;namespace&amp;nbsp;StackOverflowExamples.Library.DataAccess.EnumDataSet&lt;br /&gt;{&lt;br /&gt; public&amp;nbsp;enum&amp;nbsp;AwesomeEnum&lt;br /&gt; {&lt;br /&gt;  Awesome,&lt;br /&gt;  MoreAwesome,&lt;br /&gt;  AwesomeIncarnate&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;What you want to avoid is having to cast this back and forth from an &lt;b&gt;Int&lt;/b&gt; to an Enum. The nice folks at Microsoft were kind enough to give us a type property for each column in a DataSet that can be changed. If you select the column you want to map, and then navigate to the properties tab in Visual Studio, you will see that the column type is easily changeable.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;img src=&quot;http://4.bp.blogspot.com/_zrLYGpcNAqw/SkGRSbszr5I/AAAAAAAAAr4/KgYzIcV0YP8/s320/AwesomeIdColumn.jpg&quot; style=&quot;display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;&quot; border=&quot;0&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5350717578152226706&quot; /&gt;&lt;/div&gt;&lt;div&gt;Now all you have to do is substitute the fully qualified Enum Type into that field and you are good to go.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;a href=&quot;http://picasaweb.google.com/lh/photo/ubIVvV3zxTXtfpTD2sr6cA?authkey=Gv1sRgCJeptOeUyKuEXA&amp;amp;feat=embedwebsite&quot;&gt;&lt;img src=&quot;http://lh6.ggpht.com/_zrLYGpcNAqw/SkGS6iPG6vI/AAAAAAAAAsA/58dvcN0BomI/s800/AwesomeIdColumnDataTypeRenamed.jpg&quot; style=&quot;display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;&quot; /&gt;&lt;/a&gt;&lt;div&gt;Are we there yet? Sort of. You could officially use this right now if you want, but chances are somehwere down the road you will eventually run into this gem (after a rebuild) when you attempt to open the designer.&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot;  style=&quot;color:#0000EE;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot;  style=&quot;color:#000000;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://picasaweb.google.com/lh/photo/61HkPacV0Aqm0oTZzodxLA?authkey=Gv1sRgCJeptOeUyKuEXA&amp;amp;feat=embedwebsite&quot;&gt;&lt;img src=&quot;http://lh5.ggpht.com/_zrLYGpcNAqw/SkGXrP7jCuI/AAAAAAAAAtE/ILJ7j9bzQPc/s800/WrongDataTypeError.jpg&quot; style=&quot;display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;In case this happens, don't worry you haven't permanently broken the designer, but you will have to manually edit the .xsd file. Navigate to your DataSet .xsd file and right click on it. Choose to open it up with the text editor of your choice, but you are better off just using the default Visual Studio text editor.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://picasaweb.google.com/lh/photo/6mPamn5Km70Bn-79VWzoWw?authkey=Gv1sRgCJeptOeUyKuEXA&amp;amp;feat=embedwebsite&quot;&gt;&lt;img src=&quot;http://lh6.ggpht.com/_zrLYGpcNAqw/SkGZq1h1DhI/AAAAAAAAAtI/-C4fknFOb2g/s800/xsdfile.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Normally I don't advocate editing raw autogened XML, but this one is an easy fix. Find the line that maps your column name to a specific type. It should look something like this:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre name=&quot;code&quot; class=&quot;xml&quot;&gt;&amp;lt;xs:element name=&amp;quot;AwesomeId&amp;quot; msdata:DataType=&amp;quot;StackOverflowExamples.Library.DataAccess.EnumDataSet.AwesomeEnum, StackOverflowExamples.Library, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&amp;quot; msprop:Generator_UserColumnName=&amp;quot;AwesomeId&amp;quot; msprop:Generator_ColumnPropNameInRow=&amp;quot;AwesomeId&amp;quot; msprop:Generator_ColumnVarNameInTable=&amp;quot;columnAwesomeId&amp;quot; msprop:Generator_ColumnPropNameInTable=&amp;quot;AwesomeIdColumn&amp;quot; type=&amp;quot;xs:anyType&amp;quot; minOccurs=&amp;quot;0&amp;quot; /&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;Take a look at the &lt;i&gt;msdata:DataType&lt;/i&gt; attribute. As you can clearly see, our fully qualified type is listed here, but there is some assembly information that is causing us problems. Simply remove everything after the &lt;i&gt;Type Name.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;pre name=&quot;code&quot; class=&quot;xml&quot;&gt;&amp;lt;xs:element name=&amp;quot;AwesomeId&amp;quot; msdata:DataType=&amp;quot;StackOverflowExamples.Library.DataAccess.EnumDataSet.AwesomeEnum&amp;quot; msprop:Generator_UserColumnName=&amp;quot;AwesomeId&amp;quot; msprop:Generator_ColumnPropNameInRow=&amp;quot;AwesomeId&amp;quot; msprop:Generator_ColumnVarNameInTable=&amp;quot;columnAwesomeId&amp;quot; msprop:Generator_ColumnPropNameInTable=&amp;quot;AwesomeIdColumn&amp;quot; type=&amp;quot;xs:anyType&amp;quot; minOccurs=&amp;quot;0&amp;quot; /&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;Now you can save the .xsd file, close it, and reopen your DataSet in the designer without any more problems.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Enjoy your strongly typed DataSet with custom Enum values :)&lt;/div&gt;


</description>
      <pubDate>Tue, 23 Jun 2009 00:00:00 -0400</pubDate>
      <guid>http://www.technofattie.com/2009/06/23/custom-enum-in-strongly-typed-dataset.html</guid>
      <dc:date>2009-06-23T00:00:00-04:00</dc:date>
    </item>
    <item>
      <title>MandelBrot Bitmap</title>
      <link>http://www.technofattie.com/2007/12/22/mandelbrot-bitmap.html</link>
      <description>So recently I was reading &lt;a href=&quot;http://www.secretgeek.net&quot;&gt;secretGeek&lt;/a&gt; (a very underated blog I enjoy), and there was this interesting post about an &lt;a href=&quot;http://blogs.msdn.com/lukeh/archive/2007/11/14/f.aspx&quot;&gt;F# program&lt;/a&gt; that Mr. Bambrick tweaked a little. The &lt;a href=&quot;http://www.secretgeek.net/f_mandel.asp&quot;&gt;variation&lt;/a&gt; was interesting, and it piqued my interests into the cryptic style behind F#. However, just before I could get away with another quick read my geekish manhood was challenged.&lt;br /&gt;&lt;blockquote&gt;&lt;br /&gt;&lt;p align=&quot;left&quot;&gt;&lt;em&gt;&quot;Your mission!&lt;br /&gt;Next step: do the same thing rendering pixels to a bitmap instead... then i could try breaking that up amongst multiple cores... no... sleep time.&lt;br /&gt;&lt;br /&gt;The interested reader is invited to finish this problem for me ;-)&quot;&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;-- secretGeek&lt;/p&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;I had to do something or I could never again return to secretGeek without being pushed around by all the other readers (they think they're so cool with their big brains). So... I went home and geeked out in front of my laptop, which is kind of like Hulking out for nerds except for the muscles and awesomeness.&lt;/p&gt;&lt;br /&gt;&lt;p&gt;After installing the F# components and firing up VS, I copied the necessary file and began to make some modifications. After 3 hours of staring at documentation (Oh what I wouldn't give for some curly braces) and about 30 seconds of coding I came up with a pretty simple solution that works nicely.&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Here are the relevant code changes:&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;&lt;code&gt;&lt;span style=&quot;font-family:courier new;&quot;&gt;&lt;span style=&quot;color:#3333ff;&quot;&gt;let&lt;/span&gt; stepY = 0.1 / 40.0 &lt;/span&gt;&lt;span style=&quot;font-family:courier new;&quot;&gt;&lt;span style=&quot;color:#009900;&quot;&gt;//Scale goes in increments of 20 pixels for height&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#3333ff;&quot;&gt;let&lt;/span&gt; stepX = 0.05 / 20.0 &lt;/span&gt;&lt;span style=&quot;font-family:courier new;&quot;&gt;&lt;span style=&quot;color:#006600;&quot;&gt;&lt;span style=&quot;color:#009900;&quot;&gt;//Scale goes in increments of 60 pixels for width&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color:#009900;&quot;&gt;//Simple declarations to get the height and width of the Bitmap&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color:#3333ff;&quot;&gt;let&lt;/span&gt; numPixelsX = (int)(3.0 / stepX)&lt;br /&gt;&lt;span style=&quot;color:#3333ff;&quot;&gt;let&lt;/span&gt; numPixelsY = (int)(2.0 / stepY)&lt;br /&gt;&lt;span style=&quot;color:#3333ff;&quot;&gt;let&lt;/span&gt; bmp = &lt;span style=&quot;color:#3333ff;&quot;&gt;new&lt;/span&gt; Bitmap(numPixelsX, numPixelsY)&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family:courier new;&quot;&gt;&lt;span style=&quot;color:#009900;&quot;&gt;//This is used to figure out what the current X and Y coordinates are&lt;br /&gt;// during processing in order to set the appropriate pixels in the Bitmap&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color:#3333ff;&quot;&gt;let&lt;/span&gt; getPosY y = (int)(Math.Abs((Math.Floor -1.0 - y) / stepY))&lt;br /&gt;&lt;span style=&quot;color:#3333ff;&quot;&gt;let&lt;/span&gt; getPosX x = (int)(Math.Abs((Math.Floor -2.0 - x) / stepX))&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color:#3333ff;&quot;&gt;for&lt;/span&gt; y &lt;span style=&quot;color:#3333ff;&quot;&gt;in&lt;/span&gt; [-1.0..stepY..1.0] &lt;span style=&quot;color:#3333ff;&quot;&gt;do&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#3333ff;&quot;&gt;for&lt;/span&gt; x &lt;span style=&quot;color:#3333ff;&quot;&gt;in&lt;/span&gt; [-2.0..stepX..1.0] &lt;span style=&quot;color:#3333ff;&quot;&gt;do &lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#3333ff;&quot;&gt;match&lt;/span&gt; mandelbrot (Complex.Create (x, y)) &lt;span style=&quot;color:#3333ff;&quot;&gt;with&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;DidNotEscape -&gt; bmp.SetPixel(getPosX x, getPosY y, Color.FromArgb(255, 255, 255));&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;Escaped e -&gt; bmp.SetPixel(getPosX x, getPosY y, Color.FromArgb((min 9 e) * 20, 0, 0));&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#3333ff;&quot;&gt;done&lt;/span&gt;;&lt;br /&gt;&lt;span style=&quot;color:#3333ff;&quot;&gt;done&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;bmp.Save(String.Format(&lt;span style=&quot;color:#990000;&quot;&gt;&quot;Images\\mandelBrot_{0}_{1}.bmp&quot;&lt;/span&gt;, numPixelsX, numPixelsY), ImageFormat.Bmp)&lt;br /&gt;bmp.Save(String.Format(&lt;span style=&quot;color:#990000;&quot;&gt;&quot;Images\\mandelBrot_{0}_{1}.png&quot;&lt;/span&gt;, numPixelsX, numPixelsY), ImageFormat.Png)&lt;br /&gt;bmp.Save(String.Format(&lt;span style=&quot;color:#990000;&quot;&gt;&quot;Images\\mandelBrot_{0}_{1}.jpeg&quot;&lt;/span&gt;, numPixelsX, numPixelsY), ImageFormat.Jpeg)&lt;/span&gt;&lt;/code&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;And here is a sample of what the output looks like:&lt;/p&gt;&lt;br /&gt;&lt;p&gt;&lt;a href=&quot;http://2.bp.blogspot.com/_zrLYGpcNAqw/R2y6BEgHIgI/AAAAAAAAADc/ak_RH1D9FFE/s1600-h/mandelBrot_300_200.jpeg&quot;&gt;&lt;img id=&quot;BLOGGER_PHOTO_ID_5146693001728696834&quot; style=&quot;DISPLAY: block; MARGIN: 0px auto 10px; CURSOR: hand; TEXT-ALIGN: center&quot; alt=&quot;&quot; src=&quot;http://2.bp.blogspot.com/_zrLYGpcNAqw/R2y6BEgHIgI/AAAAAAAAADc/ak_RH1D9FFE/s320/mandelBrot_300_200.jpeg&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Cheers,&lt;/p&gt;&lt;p&gt;Josh&lt;br /&gt;&lt;/p&gt;


</description>
      <pubDate>Sat, 22 Dec 2007 00:00:00 -0500</pubDate>
      <guid>http://www.technofattie.com/2007/12/22/mandelbrot-bitmap.html</guid>
      <dc:date>2007-12-22T00:00:00-05:00</dc:date>
    </item>
    <dc:date>2014-07-01T00:00:00-04:00</dc:date>
  </channel>
</rss>